* [[https://inc42.com/buzz/10-rules-success-marc-andreessen/][10 Rules success marc]]                                            :Business:
* Mathematicians 
So sometimes I think someones whole work seems really cool but I am worried I won't remember their name.
** [[https://en.wikipedia.org/wiki/Richard_E._Bellman][Richard Bellman]]:Mathematician:DynamicProgramming:CurseOfDimensionality:
Richard Bellman invented Dynamic programming. What a cool thing to invent.
* Nix
** [[https://iohk.io/blog/how-we-use-nix-at-iohk/][IOHK How we use Nix]] :IOHK:Nix:
Why Nix?
There are many existing systems for software configuration management, 
some with far more users than Nix. However, we believe that Nix has the 
best available implementation of ‘Infrastructure as Code’, not only in 
terms of features, but also in its design and potential.
** [[https://nixos.wiki/wiki/Nix_Expression_Language][The Nix Expression Language]] :Nix:Language:
This discussion article covers the syntax, semantics, typing, compilation, tooling and libraries of the Nix Expression Language. 
** [[https://blog.patchgirl.io/nixos/2020/03/31/nixos.html][Work through building a website in nix]]
This is the last article of this series and will focus on my experience with NixOS.
In a nutshell, NixOS is a operating system based on Linux that provides a declarative package and configuration management.
** [[https://engineering.shopify.com/blogs/engineering/what-is-nix][Motivational Nix blogpost]]  
** [[https://nixos.org/nix/manual/#chap-writing-nix-expressions][Specific Nix Expression Building]]:Nix:Language:
* Haskell
** [[http://blog.ezyang.com/2017/08/backpack-for-deep-learning/][Backpack]] :Haskell:
** [[https://hackage.haskell.org/package/discrimination][Discrimination encoding]]     :Haskell:                            :Library:
** [[https://hackage.haskell.org/package/Frames-0.1.4?utm_source=twitterfeed&utm_medium=twitter][Data Frames]] :Haskell:                                            :Library:
** [[http://r6.ca/blog/20110808T035622Z.html][shortest path algorithm (star-semiring)]] :Haskell:                :Library:
** [[http://hackage.haskell.org/package/aivika-lattice][Haskell Library for agent modeling and simulation]] :Haskell:      :Library:
** [[https://blog.jle.im/entry/introducing-the-hamilton-library.html#.WDxpf_lLz-U.twitter][General purpose physics simulator]] :Haskell:                      :Library:
** [[https://www.haskell.org/onlinereport/lexemes.html][Haskell Report Syntax]] :Haskell:                                   :DevOps:
** [[https://github.com/ghcjs/ghcjs/wiki/Porting-GHCJS-Template-Haskell-to-GHC][Luite's advice on porting TH to GHC]] :Haskell:                     :DevOps:
** [[http://homepage.cs.uiowa.edu/~slonnegr/plf/Book/][syntax and semantics in haskell]] :Haskell:                         :DevOps:
** [[http://www.stephendiehl.com/posts/ghc_01.html][GHC Compiler]] :Haskell:                                            :DevOps:
** [[https://typesandkinds.wordpress.com/2015/09/09/what-are-type-families/][Eisenberg on Type Families]] :Haskell:                        :TypeFamilies:
** [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.106.364&rep=rep1&type=pdf][Total Functional Programming From Haskell]]  :Haskell: :FP:         :Theory:
** [[http://clathomasprime.github.io/hask/freeDecision][Decision Trees as Free Monads]] :Haskell: :Theory:                      :FP:
** [[https://oleksandrmanzyuk.wordpress.com/2014/06/18/from-object-algebras-to-finally-tagless-interpreters-2/][Final Tagless vs Object Algebras]] :Haskell:                        :Theory: 
** [[https://functor.tokyo/blog/2017-07-28-ghc-warnings-you-should-enable][Warnings that should should enable]] :Haskell: :Tools:
** [[https://www.reddit.com/r/programming/comments/w4gs6/levenshtein_distance_in_haskell/c5a6jjz/][Levenshtein Distance]] :Haskell: :Optimization:
** [[http://hackage.haskell.org/package/generic-lens-1.0.0.1/docs/Data-Generics-Product-Fields.html#t:HasField][Generic Lens]] :Haskell: :Lens:
** [[https://github.com/haskell-suite/haskell-src-exts/blob/master/tests/examples/DerivingVia.hs#L165][Deriving Via Example]]

** [[http://www.well-typed.com/blog/2019/09/eventful-ghc/][GHC Eventlog]] :EventLog:GHC:

** [[https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/][GHC Users Guide]] :GHC:Guide:Manual:
** [[https://tech.fpcomplete.com/blog/2018/04/async-exception-handling-haskell/][Exception Handling Problems with Async]]:Haskell:Exceptions:Async:
* SML, Ocaml, Reason
** [[http://www.cs.cmu.edu/~crary/papers/2018/cmtool.pdf][Parser Generators]] :SML:Haskell:Parsing:
** [[https://jozefg.bitbucket.io/posts/2015-01-08-modules.html][ML Modules]] :SML: :Programming: :FP:
** [[http://blog.shaynefletcher.org/2017/05/more-type-classes-in-ocaml.html][Ocaml To Haskell]] :Haskell:OCaml:Reason:

** [[https://github.com/shrynx/awesome-ppx-reasonml][PPX resources]] :PPX:Ocaml:
** [[https://jaredforsyth.com/posts/template-based-macros-for-reason-ocaml/][Forsythe PPX]]:PPX:Ocaml:
** [[https://blog.hackages.io/reasonml-ppx-8ecd663d5640][A good walkthrough on Reason PPX]] :PPX:Ocaml:
* Agda
** [[https://doisinkidney.com/posts/2019-04-17-cubical-probability.html][Cubical Probability in Agda]] :Agda:CubalTypes:Probability
Probability Monads in Cubical Agda
Posted on April 17, 2019
Tags: Agda, Probability

Cubical Agda has just come out, and I’ve been playing around with it for a bit. 
There’s a bunch of info out there on the theory of cubical types, 
and Homotopy Type Theory more generally 
(cubical type theory is kind of like an “implementation” of Homotopy type theory), 
but I wanted to make a post demonstrating cubical Agda in practice, and one of 
its cool uses from a programming perspective.
So What is Cubical Agda?
I don’t really know! Cubical type theory is quite complex (even for a type theory), 
and I’m not nearly qualified to properly explain it. In lieu of a proper 
first-principles explanation, then, I’ll try and give a few examples of how 
it differs from normal Agda, before moving on to the main example of this post. 
* ATS 
*** [[https://bluishcoder.co.nz/2013/01/25/an-introduction-to-pointers-in-ats.html][Pointers in ATS]] :Pointers:ATS:FP:LinearTypes:
*** [[http://ats-lang.sourceforge.net/DOCUMENT/INT2PROGINATS/HTML/INT2PROGINATS-BOOK-onechunk.html][ATS Lang]] :ATS:
*** [[https://bluishcoder.co.nz/2017/12/02/cross-compiling-ats-programs.html][cross compiling ats programs]] :ATS:Building:
*** [[https://github.com/githwxi/ATS-Postiats/wiki/keywords][Keywords in ats]]:ATS:FP:
*** [[http://ats-lang.sourceforge.net/DOCUMENT/ATS2TUTORIAL/HTML/ATS2TUTORIAL-BOOK-onechunk.html][Keywords in ats contd]] :ATS:FP:
*** [[http://ats-lang.sourceforge.net/DOCUMENT/INT2PROGINATS/HTML/INT2PROGINATS-BOOK-onechunk.html][Keywords in ats contd 2]] :ATS:FP:
*** [[http://cs.likai.org/ats/ml-programmers-guide-to-ats][MLprogrammers guide to ATS]]
* Javascript
*** [[https://reaktor.com/blog/javascript-performance-fundamentals-make-bluebird-fast/][Optimizing JS]] :Javascript: :Optimization:
*** [[https://overreacted.io/a-complete-guide-to-useeffect/][React Reason useEffect]] :javascript:hooks:react:Reason:Ocaml:BuckleScript:
*** [[https://tools.ietf.org/html/draft-handrews-json-schema-01][json-schema]]
* SMT and Static Analysis
** [[https://cacm.acm.org/magazines/2019/8/238344-scaling-static-analyses-at-facebook/fulltext][Static Analysis]]  
Static analysis tools are programs that examine, and attempt to draw conclusions about, 
the source of other programs without running them. At Facebook, we have been investing 
in advanced static analysis tools that employ reasoning techniques similar to those from 
program verification. The tools we describe in this article (Infer and Zoncolan) target 
issues related to crashes and to the security of our services, they perform sometimes 
complex reasoning spanning many procedures or files, and they are integrated into 
engineering workflows in a way that attempts to bring value while minimizing friction.
* Coq
*** [[https://gist.github.com/relrod/0e19d50c17c162d7389f460c8a6c2082][printf]] :Coq: :Library:
*** [[http://adam.chlipala.net/cpdt/html/Cpdt.StackMachine.html][CPDT book]] :Coq: :Book:
*** [[http://lambda.jstolarek.com/2017/07/deepspec-summer-school-2017-a-summary/][Deep Spec Summer School]] :Coq: :SMT: :FormalVerification:

*** [[https://arxiv.org/abs/2006.03525][Text Editor Paper]] :Coq:TextEditor:FormalVerification:
* CProgramming
** [[https://www.lysator.liu.se/c/ten-commandments.html][Nice Reminders in C]] :C Programming:Lint:
** [[https://blog.stephenmarz.com/2020/05/20/assemblys-perspective/][Assembly's Perspective of C]] :C Programming:Lint:
Really interesting blog post on C interacting with assembly.
** [[http://www.avabodh.com/cin/cin.html][C structures]]:C Programming:Lint:
* Computer Graphics
** [[https://thebookofshaders.com/][Book of Shaders, how cool]] :ComputerGraphics:Shaders:
* CSS
*** [[https://robots.thoughtbot.com/you-don-t-need-javascript-for-that][Css tricks to replace JS]] :CSS: :Example:
* Text and Content Editing
** [[http://ergoemacs.org/emacs/elisp_syntax_coloring.html][Syntax Highlighting example in emacs]] :emacs:typography:
** [[https://joaotavora.github.io/yasnippet/snippet-development.html][YaSnippet examples]]
Really nice examples of using YaSnippet including the one I forget all the time 

#+BEGIN_SRC markdown

Tab stop fields

Tab stops are fields that you can navigate back and forth by TAB and S-TAB. They are written by $ followed with a number. $0 has the special meaning of the exit point of a snippet. That is the last place to go when you've traveled all the fields. Here's a typical example:

<div$1>
    $0
</div>

Placeholder fields

Tab stops can have default values – a.k.a placeholders. The syntax is like this:

${N:default value}

They act as the default value for a tab stop. But when you first type at a tab stop, the default value will be replaced by your typing. The number can be omitted if you don't want to create mirrors or transformations for this field.
Mirrors

We refer the tab stops with placeholders as a field. A field can have mirrors. All mirrors get updated whenever you update any field text. Here's an example:

\begin{${1:enumerate}}
    $0
\end{$1}


#+END_SRC

** [[https://orgmode.org/org.html#Structure-templates][structure-templates for src control]]
* Signal Processing
** [[http://www.anuncommonlab.com/articles/how-kalman-filters-work/][kalman filters, how they work]]                           :SignalProcessing: 
* FP General
** [[https://cdsmith.wordpress.com/2012/04/18/why-do-monads-matter/][Why Monads Matter]]   :FP:                                          :Theory:
** [[https://github.com/GaloisInc/ivorylang-org/blob/master/extras/ivory-rust/ivory-rust.md][ivory vs. rust]] :Rust:                                              :Ivory: 
** [[https://github.com/jozefg/drafts/blob/master/graphs.pdf][Graph models of the Lambda Calculus]] :FP: :Theory:
* Machine Code
[[http://www.sizecoding.org/wiki/Main_Page][Small Programs for 80x86]] :Assembly:
[[http://xlogicx.net/][Assembly is too high level]] :Assembly:Blog:
[[https://www.agner.org/optimize/][Optimization Resources for Assembly]] :Assembly:Optimization:
* Developer Tools   
** [[http://orgmode.org/manual/Easy-templates.html#Easy-templates][org-mode easy templates]]                                         :DevTools: :OrgMode:
** [[https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-yuan.pdf][Simple Testing Prevents most failures (distributed testing)]]     :DevTools: :Testing:
** [[http://unicodelookup.com/][Unicode Lookup Table]] :DevTools: :Unicode:
** [[http://www.hiqpdf.com/demo/ConvertHtmlToSvg.aspx][HTML to SVG]] :DevTools: :Html: :Svg:
** [[https://blog.trailofbits.com/2020/06/05/breaking-the-solidity-compiler-with-a-fuzzer/][Usinga  fuzzer to break a compiler]] :DevTools:Fuzzer:
* DevOps
** [[https://blog.gitguardian.com/secrets-api-management/][Secrets Management]] :Security:DevOps:
* Networking
*** [[http://www.tcpipguide.com/index.htm][TCP/IP]]  :Networking: :TCP:
*** [[https://medium.com/@copyconstruct/nonblocking-i-o-99948ad7c957][Nonblocking IO]]
* Machine Learning
** [[https://medium.com/@vitali.usau/install-cuda-10-0-cudnn-7-3-and-build-tensorflow-gpu-from-source-on-ubuntu-18-04-3daf720b83fe][Installing tensor flow]] :TensorFlow:
** [[https://arxiv.org/abs/1707.09627][Graphics Inference]] :MachineLearning:

** [[https://arxiv.org/pdf/1312.6184.pdf][Do Deep nets need to be deep]]
** [[https://arxiv.org/pdf/1706.08605.pdf][Correct Machine Learning]] :MachineLearning:
** [[https://arxiv.org/abs/1612.04858][bayesian optimization for ML]] :MachineLearning:
** [[http://www.inference.vc/everything-that-works-works-because-its-bayesian-2/][everything that works]] :MachineLearning:
** [[http://videolectures.net/deeplearning2016_montreal/][Deep learning summer school]] :MachineLearning:
** [[http://karpathy.github.io/2015/05/21/rnn-effectiveness/][Unreasonable effectiveness of neural network]] :MachineLearning:
** [[http://www.asimovinstitute.org/neural-network-zoo/][Neural Network Zoo]] :MachineLearning:
** [[https://github.com/ZuzooVn/machine-learning-for-software-engineers][Machine Learning For Software engineers]] :MachineLearning:
** [[http://queue.acm.org/detail.cfm?id=3055303][Meijr probabilistic machine learning models]] :MachineLearning:
** [[http://queue.acm.org/detail.cfm?id=3055303][Meijr probabilistic machine learning models]] :MachineLearning:
** [[https://blog.floydhub.com/][genetic algorithms]] :MachineLearning
When you're solving a problem, how do you know if the answer you've found is correct? 
** [[https://arxiv.org/pdf/1707.04615.pdf][Machine Learning Models]]
** [[https://insidebigdata.com/2017/02/03/pmml-pfa-way-forward-deploying-predictive-analytics/][PFA and PMML Machine learning interchange]] :MachineLearning:
** [[https://blog.jle.im/entry/practical-dependent-types-in-haskell-1.html][Neural Network example in haskell]] :Haskell:MachineLearning:
** [[https://www.pnas.org/content/early/2019/06/21/1817218116][Principal Component Analysis]]
** [[https://joellaity.com/2018/10/18/pca.html][PCA Spread Out]]
** [[https://towardsml.com/2019/09/17/bert-explained-a-complete-guide-with-theory-and-tutorial/][Machine Learning Bert]] :MachineLearning:NLP:Bert:
** [[https://github.com/onnx/onnx][ONNX Open Neural Net Exchange]] :MachineLearning:DevOps:
** Clustering Algorithms
*** [[https://micans.org/mcl/][Markov Clustering]] :MachineLearning:Clustering:
*** [[https://en.wikipedia.org/wiki/Louvain_Modularity][Louvain Clustering]] :MachineLearning:Clustering:
*** [[ https://en.wikipedia.org/wiki/Affinity_propagation ][ Affinity Propgation Clustering ]]
** Decision Trees
*** [[https://victorzhou.com/blog/intro-to-random-forests/][Intro to random forests]]
[[./decisiontree.png]]
Decision trees and random forest, an understandable introduction to me.
* Numerical Computing
** [[https://cheatsheets.quantecon.org/][Rosetta Stone Matlab,python,julia]]:NumbericalComputing:Matlab:Python:Julia:
A set of examples in Matlab Python and Julia
[[./MatlabPythonRosetta.png]]
** [[https://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-0-Scientific-Computing-with-Python.ipynb][python numeric tutorial]] :NumericalComputing:Python:
Jupyter Notebook course
** [[https://news.ycombinator.com/item?id=20211201][Probabalistic Programming for end users]] :Probabalistic:Programming:
** [[https://en.m.wikipedia.org/wiki/Simulated_annealing][Simulated Annealing]] :Programming:Algorithms:NumericalComputing:
[[./Travelling_salesman_problem_solved_with_simulated_annealing.gif]]
** [[https://turing.ml/dev/][Turing.jl]] :Probabilistic:Probramming:Julia:
** Jupyter Notebook Links
*** [[https://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb][Introduction Plot Example]]
*** [[https://tkf.github.io/emacs-ipython-notebook/#setup][Emacs Ipython Notbook]] 
* Physics
*** [[http://philsci-archive.pitt.edu/13523/1/blackhole_review.pdf][Case for blackholes]] :Physics:Blackholes:
**** [[http://philsci-archive.pitt.edu/13523/1/blackhole_review.pdf][Blackholes II]] :Physics:Blackholes:
*** [[https://mitpress.mit.edu/sites/default/files/titles/content/sicm_edition_2/toc.html][Structure and Interpretation of Mechanics]] :Physics:
* Math
** Graph Theory 
*** [[http://web.stanford.edu/~saberi/sis2.pdf][Random Graph Generation]]   :Math:                            :GraphTheory:
*** [[http://web.cs.elte.hu/~lovasz/bookxx/geomgraphbook/geombook2019.01.11.pdf][Graphs and Geometry]] :GraphTheory:Geometry:
** meta math
*** [[https://plus.google.com/u/0/+TerenceTao27/posts/6diqmz1JQrB][Terrance Tao, the meaning of =]]   :Math: :GraphTheory:               :Tao:
*** [[https://linguotopia.wordpress.com/2016/04/24/notes-on-a-history-of-mathematics/][History of math]]  :Math:                                         :History:
** Probability
*** [[https://www.researchers.one/article/2020-03-9][Naive Probability]] :Probability:Math:Reasoning:
Naive probabilism is the (naive) view, held by many technocrats and academics, 
that all rational thought boils down to probability calculations. This viewpoint 
is behind the obsession with `data-driven methods' that has overtaken the 
hard sciences, soft sciences, pseudosciences and non-sciences. 
It has infiltrated politics, society and business. 
It's the workhorse of formal epistemology, decision theory and behavioral economics. 

*** [[https://research.neustar.biz/2012/04/18/statistical-toolbox-the-kolmogorov-smirnov-test/][Kolmogorov Smirnov Test]] :Math: :Probability:                       :Stat:
*** [[https://static1.squarespace.com/static/54bf3241e4b0f0d81bf7ff36/t/55e9494fe4b011aed10e48e5/1441352015658/probability_cheatsheet.pdf][Distributions CheatSheet]] :Stat:Probability:Math:
*** [[https://medium.com/@allenfarrington/a-tale-of-two-talebs-1775dff3302b][A Tale of Two Talebs, lots of links of Probability]]:Probability:Critique:Taleb
While this is mostly a takedown of Nassim Taleb, there are lots of intersting links
and thoughts from disciplines related to risk taking.
** Calculus
*** [[https://www.semanticscholar.org/paper/The-Solution-of-the-Problem-of-Integration-in-Fini-RISCH/de5adc98bc00734d0714be30ba268a1b0e818e6d?citingPapersSort=is-influential&citingPapersLimit=10&citingPapersOffset=10&citedPapersSort=is-influential&citedPapersLimit=10&citedPapersOffset=0][Risch algorithm]] :Calculus:
** Statistics
*** [[http://www.stat.uchicago.edu/~pmcc/tensorbook/][Tensor Methods in Statistics]]  :Math: :Stat:                      :Tensor:
*** [[https://lindeloev.github.io/tests-as-linear/][Statistical tests as linear models]]
[[./linear-models-statistical-tests.png]]
*** [[https://link.springer.com/book/10.1007/978-3-319-29854-2][Time series Forecasting Textbook ]] :Math:Stat:forecasting:
*** [[https://otexts.com/fpp2/][Forecasting Principles and Practice]] :Math:Stat:forecasting:
The book is written for three audiences: (1) people finding themselves doing forecasting in business 
when they may not have had any formal training in the area; (2) undergraduate students studying business; 
(3) MBA students doing a forecasting elective. We use it ourselves for a third-year subject for 
students undertaking a Bachelor of Commerce or a Bachelor of Business degree at Monash University, Australia.
*** [[https://kanoki.org/2020/04/30/time-series-analysis-and-forecasting-with-arima-python/][Arima Forecasting]] :Math:Stat:forecasting:
In the previous post we have seen how to visualize a time series data. In this post we will discuss 
how to do a time series modelling using ARMA and ARIMA models. Here AR stands for Auto-Regressive and MA stands for Moving Average
** Vizualization
*** [[https://news.ycombinator.com/item?id=23430282][Penrose Math Formula visualization]] :Visualization:Math:
A team of researchers from CMU and Technion recently introduced a new system, Penrose, 
that can turn complex mathematical notations into various styles of simple diagrams. 
The novel system rapidly attracted attention on social media as a promising visualization 
tool for effectively communicating complex mathematical ideas and concepts.
*** [[https://seaborn.pydata.org/tutorial/aesthetics.html#seaborn-figure-styles][Sin plot style in python]]
#+BEGIN_SRC 
sns.set_style("dark")
sinplot()
#+END_SRC
*** [[https://discourse.julialang.org/t/jupyter-integration-with-emacs/21496/5][Jupyter and Emacs ]]
This is a nice blog post on emacs Jupyter 
*** [[https://github.com/dzop/emacs-jupyter][emacs-jupyter package]]

This is the actual package for emacs and jupyter integration 
use jupyter-run-repl in org mode
** Geometry
*** [[http://www.math.chalmers.se/~wastlund/Cosmic.pdf][Geometric Proof of Eulers Formula]] :Math:                       :Geometry:
*** [[http://erikdemaine.org/papers/CGTA2000/paper.pdf][Algorithmic paper folding]] :Math: :Geometry:                     :Origami:
*** [[https://www.scribd.com/document/190482625/A-practical-algorithm-for-decomposing-polygonal-domains-into-convex-polygons-by-diagonals][Convex Hull Decomposition]] :Math: :Geometry:       :ComputationalGeometry:
*** [[https://www.cs.cmu.edu/~kmcrane/Projects/DGPDEC/paper.pdf][Discrete Differential Geometry]] :Geometry:DifferentialGeometry:
** Linear
*** [[https://networkscience.wordpress.com/2012/05/04/taxonomy-of-matrices/][Taxonomy of Matricies]] :Math:                                     :Linear:
*** [[https://golem.ph.utexas.edu/category/2016/06/how_the_simplex_is_a_vector_sp.html][Simplex as a Vector Space]] :Math:                                 :Linear:
*** [[http://www-math.mit.edu/~etingof/egnobookfinal.pdf][Tensor Categories]] :Math:                                         :Linear:
** Category Theory
+ [[https://golem.ph.utexas.edu/category/2020/01/profunctor_optics_the_categori.html#comments][Profunctor Optics a Categorical view]]
** Complexity and Information Theory
*** [[https://www.waveform.com/blogs/main/5g-and-shannons-law][Shannons law]] :Information Theory:Shannon:
*** [[https://necsi.edu/dynamics-of-complex-systems   ][Dynamics of Complex Systems]]
Dynamics of Complex Systems is the first text describing the modern unified study of complex systems. 
It is designed for upper-undergraduate/beginning graduate-level students, and covers a wide range of 
applications in a wide array of disciplines. A central goal of this text is to develop models and 
modeling techniques that are useful when applied to all complex systems. This is done by adopting 
both analytic tools, from statistical mechanics to stochastic dynamics, and computer simulation techniques, 
such as cellular automata and Monte Carlo. In four sets of paired, self-contained chapters, Yaneer Bar-Yam 
discusses complex systems in the context of neural networks, protein folding, living organisms, and finally, 
human civilization itself. He explores fundamental questions about the structure, dynamics, evolution, 
development and quantitative complexity that apply to all complex systems. In the first chapter, 
mathematical foundations such as iterative maps and chaos, probability theory and random walks, 
thermodynamics, information and computation theory, fractals and scaling, are reviewed to 
enable the text to be read by students and researchers with a variety of backgrounds.
** Constructive Mathematics 
*** [[https://ncatlab.org/nlab/show/constructive+mathematics][NCat-Lab]]
1. Idea

Broadly speaking, constructive mathematics is mathematics done without the principle of excluded middle, 
or other principles, such as the full axiom of choice, that imply it, hence without “non-constructive” 
methods of formal proof, such as proof by contradiction. This is in contrast to classical mathematics, where such principles are taken to hold.

** Linear Algebra
[[https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/index.htm][Linear Algebra Strang 2020]]
* Distributed Computing
** [[https://www.info.ucl.ac.be/~pvr/book.html][Concepts Techniques]] :CS: :Distributed:                              :Book:
** [[http://www.sosp.org/2001/papers/welsh.pdf][Stage Driven Event Architecture]] :Distributed: :CS: :Paper:
** [[https://13a75b74-a-62cb3a1a-s-sites.googlegroups.com/site/umutacar/publications/pramod-thesis.pdf?attachauth=ANoY7cqV4V3ed2LVttCmV-owtkGaRk9XTIQ95SdSaN_j2r4ecmBQYEOFkFp6EzugI24OltGUUrABzBAvPE7YvjA5KJ2xJ-zhvmSbNZ8G9TPTI2tfv3jr57wBIwKb9JfnIFxS5u5tX5PP5Sn7Vbd9p5HIzsFScFMaiqIZBabaPJbD9YHPrNFxpPF0H3eC3VvcIPWnGPpAtxRq9Ciwu9lfQn8TkjwQfD9SS3nwOprGk_6dkVskZfG5Bgs%3D&attredirects=0][Incremental parallel]] :Incremental:Distributed:CS:Paper:
** [[https://www.slideshare.net/koenighotze/event-sourcing-you-are-doing-it-wrong-devoxx][Event Sourcing Doing it Wrong]] :EventSourcing:Distributed:
** [[https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/leslie_lamport.pdf][TLA+ example]] :TLA:Distributed:Modeling:
** [[https://lamport.azurewebsites.net/video/videos.html][TLA+ Videos Leslie Lamport]] :TLA:Distributed:Modeling:
** [[https://github.com/tlaplus/Examples/tree/master/specifications/aba-asyn-byz][TLA+ Byzantine Example]] :TLA:Distributed:Example:Modeling:
+ [[file:papers/4221.214134.pdf][TLA+ Byzantine Paper]]
** [[https://github.com/elastic/elasticsearch-formal-models][Elastic Search Formal Model]] :TLA:Distributed:Modeling:Elastic:
* Type Theory
** [[https://blog.burakemir.ch/2020/04/higher-order-logic-and-equality.html?m=1][Higher Order Logic and Equality]] :TypeTheory:Logic:LambdaCalculus:
o5e59da95b58a0266fc00004c
#+BEGIN_SRC
In this post, I want to sketch a particular perspective on λ-calculus and higher-order logic and Church's simple theory of types. 
I have a few motivations to write this up. One of them is that as an undergrad (ages ago), upon encountering first-order predicate logic, 
I had endlessly wondered why one couldn't use "boolean functions" and something like functional programming for logic. 
It was only much later that I discovered Church's 1940 typed λ calculus was in a sense, just that.


#+END_SRC


** [[https://github.com/michaelt/martin-lof][Collected Works of Per Martin Loh]] :TypeTheory: :Loh: :Papers:
*** [[http://www.cs.cmu.edu/~fp/courses/15312-f04/handouts/][Foundations of Programming Languages Pfenning]] :TypeTheory: :Book:
*** [[http://www.cs.cmu.edu/~rwh/courses/hott/][Bob Harper HOTT]] :Book: :TypeTheory: :PL:
*** [[http://homepages.inf.ed.ac.uk/gdp/publications/Abstract_Syn.pdf][Marcelo Fiore Abstract Syntax Variable Binding]] :CS:
*** [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=3&ved=0ahUKEwjWl4qBpLnRAhWoi1QKHaiGAJMQFggjMAI&url=http%3A%2F%2Fresearchmap.jp%2F%3Faction%3Dcv_download_main%26upload_id%3D50501&usg=AFQjCNFV2JrOKhvMqbP_4cRyJfCxcrvpng][Mako Hamana, Syntax]] :CS: :PL:
*** [[https://www.cs.uoregon.edu/research/summerschool/summer15/curriculum.html][Basic Proof Theory]] :CS: :Lectures: :Course:
** [[https://arxiv.org/abs/1803.02294][A self-contained, brief and complete formulation of Voevodsky's Univalence Axiom]] :TypeTheory: :Univalence:
** [[https://vrahli.github.io/articles/FCS-long.pdf][Computability beyond Choice Sequences]] :TypeTheory: :Intuitionist:
** [[https://github.com/OPLSS/introduction-to-algebraic-effects-and-handlers][Introduction to Algebraic Effects]] :Andrej:TypeTheory:AlgebraicEffects:
* CS Theory PL
*** [[https://github.com/jozefg/graph-models/blob/master/graphs.pdf][Graph models of the Lambda Calculus]] :PL: :CS: :Theory:
*** [[https://www.cs.utexas.edu/~wcook/Drafts/2012/graphs.pdf][Functional Programming With Structured Graphs]] :PL: :CS: :Theory:
*** [[http://tata.gforge.inria.fr/][Tree Automata]] :PL: :CS: :Theory:
*** [[https://blog.acolyer.org/2016/05/31/how-to-build-static-checking-systems-using-orders-of-magnitude-less-code/][micro parsers]] :PL: :CS: :Theory:
*** [[http://www.cl.cam.ac.uk/~mpf23/talks/Types2011.pdf][Type Space Graph]] :PL: :CS: :Theory:
*** [[https://gitlab.inria.fr/fpottier/mpri-2.4-public][Functional programming and type systems (2017-2018)]]
*** [[http://web.engr.oregonstate.edu/~erwig/papers/abstracts.html#JFP01][Functional Graph Theory]] :PL: :CS: :Theory:
*** [[http://plzoo.andrej.com/index.html][Programming Language Zoo]] :PL: :CS: :Theory:

* CS Theory Algorithms
*** [[https://arxiv.org/pdf/1708.03486.pdf][P Vs NP]] :CS: :Theory: :Complexity:
*** [[http://rintintin.colorado.edu/~karlini/pohll08.pdf][Tuning Linear Algebra Kernels]]    :CS: :Theory: :Algorithms:

** [[http://graphblas.org/index.php?title=Graph_BLAS_Forum][Graph Blas]] :Graph Theory Project:

* Economics and Econometrics
** History of Econ
*** [[https://www.econlib.org/five-more-books-revisionist-accounts-of-the-soviet-experience/][Revisionist Soviet Economic History ]] :History:Economics:Communism:Planning:
*** [[https://www.econlib.org/understanding-soviet-socialism-twenty-five-books/][Understanding Soviet Socialism]] :History:Economics:Communism:
*** [[https://www.econlib.org/five-books-on-the-soviet-economy/][Understanding Soviet Economy]] :History:Economics:Communism:

** [[https://universa.net/riskmitigation.html][Risk Mitigation Universa]] :Risk:Economics:Markets:Investing:
Universa Fund made a huge return in Covid, these are papers on tail risk trading.
** [[http://andrewgelman.com/2017/09/07/local-data-centralized-data-analysis-local-decision-making/][Market vs government]]
** [[https://www.bloomberg.com/view/articles/2014-12-31/heres-what-economics-gets-right][Effective economic modeling techniques]] :Econometrics:
** [[http://press.princeton.edu/chapters/s10363.pdf][Mastering Metrics]] :Econometrics:
** [[http://www.mostlyharmlesseconometrics.com/book-contents/][Mostly Harmless Econometrics]] :Econometrics:
** [[https://www.nature.com/articles/s41567-019-0732-0][Ergodicity in Economics]] :Ergodicity:Econometrics:
The ergodic hypothesis is a key analytical device of equilibrium statistical mechanics. 
It underlies the assumption that the time average and the expectation value of 
an observable are the same. Where it is valid, dynamical descriptions can often 
be replaced with much simpler probabilistic ones — time is essentially eliminated from the models.
* UX UI API DSL 
** [[https://www.dexplo.org/dexplot/][Dex Plot Table Plotting Library]] :Table:Plotting:
This library is a possible helper for Custom Table
** [[https://archive.org/stream/philtrans09445034/09445034#page/n11/mode/2up][Babbages Mechanical Notation]] :History: :ME:
** [[https://fontawesome.com/cheatsheet?from=io][font-awesome cheatsheet]] :Fonts:UI:Design:
** [[https://css-tricks.com/snippets/css/a-guide-to-flexbox/][Flexbox a guide]] :Flexbox:WebDesign:CSS:UI:
* Performance Related
** [[https://www.nayuki.io/page/a-fundamental-introduction-to-x86-assembly-programming][assembly programming introduction]]  :Optimization: :Assembly:
** [[https://github.com/processone/tsung][Tsung Http]] :Optimization:Performance:Htt
* Security related
** [[https://woumn.wordpress.com/2016/05/02/security-principles-in-ios-architecture/][IOS security]] :Security:
** [[https://webcache.googleusercontent.com/search?q=cache:JTkf6Wuc348J:https://humblesec.wordpress.com/2017/07/05/assemby-to-pseudo-code-manually/][Assembly to Pseudo Code]] :Security:
** [[http://www.phrack.org/papers/attacking_javascript_engines.html][Attacking Javascript Engines]] :Security:
** [[https://github.com/brannondorsey/wifi-cracking][wifi crack]] :Security: 
* Database Related
** [[http://www.lirmm.fr/~mugnier/ArticlesPostscript/MugnierRR2011-keynote.pdf][Advanced Datalog]] :DB:  :DataLog:
** [[https://pdfs.semanticscholar.org/8b8e/27602f142b838cbeb6059865d942251d5d6a.pdf][Datalog with Existensials]]
** [[http://arxiv.org/pdf/1210.2316v1.pdf][Disjunctive Quantifiers for Datalog]] :DB: :DataLog:
** [[https://www.infoq.com/presentations/storage-algorithms][Modern DB Algorithms]] :DB:Algorithms:
** [[https://www.nginx.com/blog/what-is-a-service-mesh/][Service Mesh]]
* Electrical Engineering
** Telemetry 
*** [[https://mikrotik.com/calculator][microtik range calculator]]
** Embedded Hardware Teardowns
*** [[https://www.crowdsupply.com/inverse-path/usb-armory/manufacturing-process][Open Source Stick Computer]]    :EE:
*** [[https://www.nand2tetris.org/][Nand 2 Tetris]]
*** [[https://lwn.net/Articles/250967/][What every prog should know about memory]]
*** [[https://www.seeedstudio.com/][Internet Of things stuff]] :IOT:Embedded:Market
** Embedded Programming 
+ [[http://electronut.in/stm32-returns/][STM32 Tool Chain]]
+ [[http://www.wolinlabs.com/blog/linux.stm32.discovery.gcc.html][STM32 arm abi firmware chain]]
** RF Theory
*** [[http://www.antenna-theory.com/m/index.php][Antenna Theory Website]] :Antenna:RFTheory:
 About this Site:

Antennas and Antenna Theory has always been a fascinating subject for me, 
and it is this excitement that leads me to present this tutorial. 
In my life, I have found that once I thoroughly understand a subject, 
I am amazed at how simple it seems, despite the initial complexity. 
This I have found true for a wide range of activities, be 
it riding a motorcycle, learning about antennas, or understanding 
physical phenomena such as electromagnetics. With that in mind, 
I endeavor to write this Antenna Theory website in the simplest 
of all possible manners. 

** Digital Electronics
*** [[https://www.allaboutcircuits.com/technical-articles/universal-logic-gates/][Universal Gates]]
Introduction

A universal logic gate is a logic gate that can be used to construct all other logic gates.  
There are many articles about how NAND and NOR are universal gates, but many of these articles 
omit other gates that are also universal gates. This article covers two input logic gates, 
demonstrates that the NAND gate is a universal gate, and demonstrates how other gates are 
universal gates that can be used to construct any logic gate.
[[./OtherUniversalGates.png]]

* Mechanical Engineering 
** Electric Motors 
*** [[http://people.ucalgary.ca/~aknigh/electrical_machines/fundamentals/f_main.html][Electric Machines]] :EE: :ME: :Motors: :Drives:
* Logic 
** [[http://iml.univ-mrs.fr/~girard/trsy3.pdf][Linear Logic and Equality]] :Logic:
** [[http://blog.ezyang.com/2013/09/induction-and-logical-relations/][Logical Relations]] :Logic:
Induction and logical relations
Logical relations are a proof technique which allow you to prove things such as normalization (all programs terminate) 
and program equivalence (these two programs are observationally equivalent under all program contexts).
** [[https://www.gutenberg.org/files/28696/28696-h/28696-h.htm][Lewis Carol Symbolic Logic]] :Logic:
* Oilfield
** [[https://www.scribd.com/document/97677521/ABB-Totalflow-Plunger-User-Guide][ABB TOTAL FLOW]]  :PlungerLift: :Oil:
* GIFS
[[https://i.imgur.com/aFT0yT4.gif]]
* Marketing
** Pricing 
*** [[https://blog.reifyworks.com/developing-your-pricing-strategy-15b5bb2f2b3a][Understand your Pricing Strategy]]
* Design 
** [[https://sachachua.com/blog/2020/06/pythonfontforgeorg-i-made-a-font-based-on-my-handwriting/][Make your handwriting a font]] :Typography:Design:
I wanted to make a font based on my handwriting using only free software. 
It turns out that FontForge can be scripted with Python. I know just a little 
about Python and even less about typography, but I managed to hack together 
something that worked for me. If you’re reading this on my blog at https://sachachua.com/blog/ , 
you’ll probably see the new font being used on the blog post titles. Whee!
** [[https://practicaltypography.com/][practical typography]  :Typography:Design:
** [[https://ciechanow.ski/color-spaces/][Perception of Color Spaces]] :Design:Color:ColorTheory:Goete:Physics:
   l** [[https://vega.github.io/vega/examples/tree-layout/][Vega Examples]] :Vega:D3:
Example alternative language for D3
** [[https://medium.com/techtrument/bye-bye-material-design-acaebcc7c6b4][Dont use MD]]
What we need is to inform people better, and produce better and healthier guidelines that address fundamental human perception paradigms.

** [[https://www.happyhues.co/palettes/14][Interesting UI COlor pallettes]] :Design:Color:UI:
** [[https://practicaltypography.com/font-recommendations.html][Font Rec]]:Fonts:Typography:
** [[https://www.typography.com/blog/text-for-proofing-fonts][Text For Proofing Fonts]] :Fonts:Typography:
* Dev Ops
** https://landing.google.com/sre/book/chapters/monitoring-distributed-systems.html#xref_monitoring_golden-signals :Dev Ops:
** [[https://www.openpolicyagent.org/][DataLog Like Policy Agent (Open Policy Agent)]] :DataLog: :Murica:

** [[https://martinfowler.com/bliki/CircuitBreaker.html][Circuit Breaker]] :SystemDesign:Microservices:CircuitBreaker
** [[https://news.ycombinator.com/item?id=20442200][BPF Performance Tools]] :DevOps:BPF:D-trace:
** [[https://mxtoolbox.com/][Email MX records toolbox]] :Mail:MX:   
Website MX record test health
* Web Specs
** [[https://tools.ietf.org/html/rfc3986#section-3.3][General HTTP URI]] 
* Gas Temp Alarm
* Competitors
** [[https://openautomationsoftware.com/video-links/][Open Automation]] :Scada:
** [[http://video.andium.com/][Andium Solutions]] :TankMeasurement:MachineLearning:
* ExamplePrograms
** [[https://graphs.grevian.org/example][Graphviz]] :GraphViz:Examples:
* Makefiles
** [[https://www.gnu.org/software/make/manual/html_node/Static-Usage.html][Makefile manual static usage]] :Makefile:
* Management & Business
** [[https://stripe.com/atlas/guides/scaling-eng][Scaling an engineering organization]]
** [[https://fs.blog/mental-models/][Mental Models]]:Business:MentalModels:FarnumStreet:
** [[https://optimistictypes.com/moderating-sexual-assault/][Sexual Assault guidelines]] :Management:HR:
** [[https://erikbern.com/2019/04/15/why-software-projects-take-longer-than-you-think-a-statistical-model.html][Project Estimation in Software development]]:ProjectManagement:Business:
[[./SoftwareProjectEstimation.png]]
Estimating Software Timelines is difficult this is a nice breakdown of
some possible reasons.
[[https://news.ycombinator.com/item?id=19671673][Interesting notes in the comments]]

** [[http://www.haskellforall.com/2019/06/the-cap-theorem-for-software-engineering.html][CAP Theorem and Development]] :CAPTheorem:Development:Management:
**[[https://www.stephnass.com/blog/startup-financial-model][SaaS Financial Model]] :Business:Finance:Business Model:
As a founder, there comes a time when you need a business plan, complete with financial forecasts, income statements, and fancy graphs that will impress your investors.
** [[https://theotherlifenow.com/how-i-made-3300-on-a-short-niche-philosophy-book/][Post on Hard Tests]] :HardTests:Business:
From the post: 
A hard test is one that is unlikely to find evidence, so if you find it you have a winner.
* Industrial Automation
** [[https://www.plcacademy.com/ladder-logic-tutorial/][Ladder Logic Programming]]
** [[file:papers/Bainbridge_1983_Automatica.pdf][Irony of Automation]] :Industrial Automation:
This paper discusses the ways in which automation of industrial processes may expand 
rather than eliminate problems with the human operator. Some comments will be made on 
methods of alleviating these problems within the "classic' approach of leaving the 
operator with responsibility for abnormal conditions, and on the potential for 
continued use of the human operator for on-line decision-making within human-computer collaboration.
* Personal
** [[https://youthsoccerrankings.us/team.html?teamId=1603613][Soccer rankings]] :Soccer:
* Manufacturing
** [[https://anuschkarees.com/blog/2014/05/01/how-to-assess-the-quality-of-garments-a-beginners-guide-part-i/][Garment Quality]] :Fashion:Quality:Manufacturing:
* Particular Specifications
** Excel Format
+ [[download.microsoft.com/download/3/E/3/3E3435BD-AA68-4B32-B84D-B633F0D0F90D/SpreadsheetMLBasics.ppt][Power Point Excel Format]]
+ [[http://www.ecma-international.org/publications/standards/Ecma-376.htm][Ecma standard]]
+ [[https://en.wikipedia.org/wiki/Microsoft_Office_XML_formats][Wiki Page]]
+ [[https://docs.microsoft.com/en-us/dotnet/api/documentformat.openxml.spreadsheet.cell?redirectedfrom=MSDN&view=openxml-2.8.1][Doc format link]]
+ [[https://www.example-code.com/csharp/parse_xls.asp][Parser examples]]
* Productivity
** [[https://www.timeanddate.com/worldclock/meetingtime.html?year=2019&month=9&day=10&p1=122&p2=31&p3=184][Timezone app]] :Timezone:Scheduling:  
* Arts and Crafts
** [[http://www.supercoloring.com/][Coloring and Paper Craft]] 
** [[https://peaksel.com/blog/18-free-printable-coloring-books-kids/][coloring books]]
* Useful Applications
** [[https://github.com/sickcodes/Docker-OSX][Docker OSX]] :Docker:OSX:Computer Applications:
