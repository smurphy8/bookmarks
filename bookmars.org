* [[https://inc42.com/buzz/10-rules-success-marc-andreessen/][10 Rules success marc]]                                            :Business:
* arts and crafts
** [[http://www.supercoloring.com/][coloring and paper craft]] 
** [[https://peaksel.com/blog/18-free-printable-coloring-books-kids/][coloring books]]
** Fine Art
*** [[https://david.li/][Digital Art of David Li]]
*** [[https://www.rafael-araujo.com/product-page/blue-spikes-shell][Digital Art Butterflies guy]]    
* competitors
** [[https://openautomationsoftware.com/video-links/][open automation]] :scada:
** [[http://video.andium.com/][andium solutions]] :tankmeasurement:machinelearning:
* Computer Programming
** FP General
*** [[https://cdsmith.wordpress.com/2012/04/18/why-do-monads-matter/][Why Monads Matter]]   :FP: :Theory:
*** [[https://github.com/GaloisInc/ivorylang-org/blob/master/extras/ivory-rust/ivory-rust.md][ivory vs. rust]] :Rust: :Ivory: 
*** [[https://github.com/jozefg/drafts/blob/master/graphs.pdf][Graph models of the Lambda Calculus]] :FP: :Theory:
** Programming Methodology
*** Type Driven Design 
**** [[https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/][Parse Don't Validate]] :TypeDrivenDesign:
**** [[https://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/][Making Illegal States Unrepresentable]] :TypeDrivenDesign:    
*** Gotchas
**** [[https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/][People have names]] :Gotchas:Names:
** Production System Best Practices
*** Logging
**** [[https://www.youtube.com/watch?v=qzOQOmmkKEM][Duncan Coutts Logging]] :Logging:Haskell:

** ComputerScience Theory Programming Languages
**** [[https://github.com/jozefg/graph-models/blob/master/graphs.pdf][graph models of the lambda calculus]] :ProgrammingLanguages: :ComputerScience: :theory:
**** [[https://www.cs.utexas.edu/~wcook/drafts/2012/graphs.pdf][functional programming with structured graphs]] :ProgrammingLanguages: :ComputerScience: :theory:
**** [[http://tata.gforge.inria.fr/][tree automata]] :ProgrammingLanguages: :ComputerScience: :theory:
**** [[https://blog.acolyer.org/2016/05/31/how-to-build-static-checking-systems-using-orders-of-magnitude-less-code/][micro parsers]] :ProgrammingLanguages: :ComputerScience: :theory:
**** [[http://www.cl.cam.ac.uk/~mpf23/talks/types2011.pdf][type space graph]] :ProgrammingLanguages: :ComputerScience: :theory:
**** [[https://gitlab.inria.fr/fpottier/mpri-2.4-public][functional programming and type systems (2017-2018)]]
**** [[http://web.engr.oregonstate.edu/~erwig/papers/abstracts.html#jfp01][functional graph theory]] :ProgrammingLanguages: :ComputerScience: :theory:
**** [[http://plzoo.andrej.com/index.html][programming language zoo]] :ProgrammingLanguages: :ComputerScience: :theory:

**** [[file:papers/join_methods_actor_pattern.pdf][Complex Event Processing Advanced join patterns]] :ProgrammingLanguages:Algorithms:Events:
** Computer Science Theory algorithms
*** [[https://travisdowns.github.io/blog/2019/05/22/sorting.html][QSort Adjustments for speed]] :theory:sort:algorithms:
Benchmarking Qsort

First, let’s take a look at what qsort is doing, to see if there is any delicous low-hanging performance fruit. 
We use perf record ./bench qsort to capture profiling data, and perf report --stdio to print a summary3:

+ Samples: 101K of event 'cycles:ppp'
+ Event count (approx.): 65312285835

| Overhead | Command | Shared Object             | Symbol                     |
|----------+---------+---------------------------+----------------------------+
|   64.90% | bench   | libc-2.23.so              | [.] msort_with_tmp.part.0  |
|   21.45% | bench   | bench                     | [.] compare_uint64_t       |
|    8.65% | bench   | libc-2.23.so              | [.] __memcpy_sse2          |
|    0.87% | bench   | libc-2.23.so              | [.] __memcpy_avx_unaligned |
|    0.83% | bench   | bench                     | [.] main                   |
|    0.41% | bench   | [kernel.kallsyms]         | [k] clear_page_erms        |
|    0.34% | bench   | [kernel.kallsyms]         | [k] native_irq_return_iret |
|    0.31% | bench   | bench                     | [.] bench_one              |

*** [[https://arxiv.org/pdf/1708.03486.pdf][p vs np]] :Computer Science: :theory: :complexity:
*** [[http://rintintin.colorado.edu/~karlini/pohll08.pdf][tuning linear algebra kernels]]    :ComputerScience:theory:algorithms:
*** [[https://www.jsoftware.com/books/pdf/cmc.pdf][Concrete Mathematics]] :math:discreteMath:
*** [[http://graphblas.org/index.php?title=graph_blas_forum][graph blas]] :graph theory project:
**** [[http://www.mit.edu/~kepner/GraphBLAS/GraphBLAS-Math-release.pdf][Graph Blas Math Definitions]] :graph theory:GraphBlas:

*** [[https://www.cs.virginia.edu/~jlp/75.knuth.trees.pdf][knuth trees]]:algorithms:graph theory:theory:ComputerScience:
*** [[https://medium.com/@guilherme.lb/understand-lucene-to-understand-elasticsearch-85037d5b7577#0a2a-6f579ef7ae80][lucene search]] :lucene search:elastic search:
*** [[file:papers/SurveyPaperRNGMersenneTwister.pdf][RNG Mersenne Twister]] :probability:Random:Math:Algorithm:ComputerScience:
[[./img/MersenneTwister.png]]
Mersenne Twister” [22] is the collective name of a family of PRNGs (pseudorandom numbergenerators) based on
F2-linear maps.1This means that the state of the generator is a vector ofbits of sizeninterpreted as ann-dimensional 
vector on F2, the field with two elements, and thenext-state function of the generator is anF2-linear map. Since sum in
F2is just xor, it is easy toimplement such maps so that they can be computed quickly. Several linear PRNGs indeed exist,such 
as WELL [29] and xor shift[19
*** [[https://www.solipsys.co.uk/new/BinarySearchReconsidered.html?TwoEqualsFour][Binary Search, an interesting problem]] :Algorithm:ComputerScience:BinarySearch:
"Binary Search" was made popular as an interesting test problem by Jon Bentley in his book Programming Pearls. 
There he says that it's an interesting problem, and baits the hook by saying:

"I've assigned this problem in courses at Bell Labs and IBM.


"Professional programmers had a couple of hours to convert the above description into a program in the language of their choice ... 
At the end of the specified time, almost all the programmers reported that they had correct code for the task ... 
ninety percent of the programmers found bugs in their programs

** Languages
*** PLC 
**** [[http://www.semdesigns.com/Company/People/idbaxter/][Open PLC XML stuff]]
**** [[https://www.automation.com/en-us/articles/2003-1/automatic-plc-code-generation-design-interchange-s][Automatic Code Generation]]
*** [[https://www.hillelwayne.com/post/frink/][Frank a programming language for Units]]  :Frink:AltProgramming:Unit:Units:   
*** SaC
    
****  [[https://arxiv.org/pdf/1912.05234.pdf][SAC]]
Modern machine learning frameworks are complex: they aretypically 
organised in multiple layers each of which is writ-ten in a different 
language and they depend on a number ofexternal libraries, but at 
their core they mainly consist of ten-sor operations. As 
array-oriented languages provide perfectabstractions to implement 
tensor operations, we consider aminimalistic machine learning 
framework that is shallowlyembedded in an array-oriented language 
and we study itsproductivity and performance. We do this by implementinga 
state of the art Convolutional Neural Network (CNN) andcompare it against 
implementations in TensorFlow and Py-Torch — two state of the art 
industrial-strength frameworks.It turns out that our implementation 
is2 and 3 times fast
*** Coq
**** [[https://gopiandcode.uk/logs/log-bloomfilters-debunked.html][Bloom Filter Proof in Coq]]:FormalVerification:Coq:
**** [[https://gist.github.com/relrod/0e19d50c17c162d7389f460c8a6c2082][printf]] :Coq:                                                   :Library:
**** [[http://adam.chlipala.net/cpdt/html/Cpdt.StackMachine.html][CPDT book]] :Coq:                                                   :Book:
**** [[http://lambda.jstolarek.com/2017/07/deepspec-summer-school-2017-a-summary/][Deep Spec Summer School]] :Coq: :SMT:                 :FormalVerification:

**** [[https://arxiv.org/abs/2006.03525][Text Editor Paper]]                    :Coq:TextEditor:FormalVerification:

*** CProgramming
**** [[https://www.lysator.liu.se/c/ten-commandments.html][Nice Reminders in C]] :C Programming:Lint:
**** [[https://blog.stephenmarz.com/2020/05/20/assemblys-perspective/][Assembly's Perspective of C]] :C Programming:Lint:
  Really interesting blog post on C interacting with assembly.
**** [[https://www.cs.cornell.edu/courses/cs6120/2020fa/self-guided/][Advanced Compilers]]:Compilers:Course:
**** [[http://www.avabodh.com/cin/cin.html][C structures]]:C Programming:Lint:

*** ATS 
**** [[https://bluishcoder.co.nz/2013/01/25/an-introduction-to-pointers-in-ats.html][Pointers in ATS]]                            :Pointers:ATS:FP:LinearTypes:
**** [[http://ats-lang.sourceforge.net/DOCUMENT/INT2PROGINATS/HTML/INT2PROGINATS-BOOK-onechunk.html][ATS Lang]]                                                           :ATS:
**** [[https://bluishcoder.co.nz/2017/12/02/cross-compiling-ats-programs.html][cross compiling ats programs]]                              :ATS:Building:
**** [[https://github.com/githwxi/ATS-Postiats/wiki/keywords][Keywords in ats]]:ATS:FP:
**** [[http://ats-lang.sourceforge.net/DOCUMENT/ATS2TUTORIAL/HTML/ATS2TUTORIAL-BOOK-onechunk.html][Keywords in ats contd]]                                           :ATS:FP:
**** [[http://ats-lang.sourceforge.net/DOCUMENT/INT2PROGINATS/HTML/INT2PROGINATS-BOOK-onechunk.html][Keywords in ats contd 2]]                                         :ATS:FP:
**** [[http://cs.likai.org/ats/ml-programmers-guide-to-ats][MLprogrammers guide to ATS]] :ATS:FP
      
**** [[http://ats-lang.github.io/EXAMPLE/EFFECTIVATS/GraphSearch/main.html][Walkthrough ATS Graph Example]] :ATS:Graph:FP:
*** CSS
**** [[https://robots.thoughtbot.com/you-don-t-need-javascript-for-that][Css tricks to replace JS]] :CSS:                                 :Example:
**** [[https://web.dev/learn/css/][CSS Google]]
*** [[https://github.com/mirth-lang/mirth][Mirth]]
An ATS inspired language???

*** Haskell
**** [[http://blog.ezyang.com/2017/08/backpack-for-deep-learning/][Backpack]] :Haskell:
**** [[https://www.parsonsmatt.org/2020/10/13/unpack_your_existentials.html][Unpack your existentials]] :Haskell:Existentials:

**** [[https://hackage.haskell.org/package/massiv-0.5.1.0][massive an array library]]:Haskell:Library:Numeric:
**** [[https://hackage.haskell.org/package/discrimination][Discrimination encoding]]     :Haskell: :Library:
**** [[https://hackage.haskell.org/package/Frames-0.1.4?utm_source=twitterfeed&utm_medium=twitter][Data Frames]] :Haskell: :Library:
**** [[http://r6.ca/blog/20110808T035622Z.html][shortest path algorithm (star-semiring)]] :Haskell: :Library:
**** [[http://hackage.haskell.org/package/aivika-lattice][Haskell Library for agent modeling and simulation]] :Haskell: :Library:
**** [[https://blog.jle.im/entry/introducing-the-hamilton-library.html#.WDxpf_lLz-U.twitter][General purpose physics simulator]] :Haskell: :Library:
**** [[https://www.haskell.org/onlinereport/lexemes.html][Haskell Report Syntax]] :Haskell: :DevOps:
**** [[https://github.com/ghcjs/ghcjs/wiki/Porting-GHCJS-Template-Haskell-to-GHC][Luite's advice on porting TH to GHC]] :Haskell: :DevOps:
**** [[http://homepage.cs.uiowa.edu/~slonnegr/plf/Book/][syntax and semantics in haskell]] :Haskell: :DevOps:
**** [[http://www.stephendiehl.com/posts/ghc_01.html][GHC Compiler]] :Haskell: :DevOps:
**** [[https://typesandkinds.wordpress.com/2015/09/09/what-are-type-families/][Eisenberg on Type Families]] :Haskell: :TypeFamilies:
**** [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.106.364&rep=rep1&type=pdf][Total Functional Programming From Haskell]]  :Haskell: :FP: :Theory:
**** [[http://clathomasprime.github.io/hask/freeDecision][Decision Trees as Free Monads]] :Haskell: :Theory: :FP:
**** [[https://oleksandrmanzyuk.wordpress.com/2014/06/18/from-object-algebras-to-finally-tagless-interpreters-2/][Final Tagless vs Object Algebras]] :Haskell: :Theory: 
**** [[https://functor.tokyo/blog/2017-07-28-ghc-warnings-you-should-enable][Warnings that should should enable]] :Haskell: :Tools:
**** [[https://www.reddit.com/r/programming/comments/w4gs6/levenshtein_distance_in_haskell/c5a6jjz/][Levenshtein Distance]] :Haskell: :Optimization:
**** [[http://hackage.haskell.org/package/generic-lens-1.0.0.1/docs/Data-Generics-Product-Fields.html#t:HasField][Generic Lens]] :Haskell: :Lens:
**** [[https://github.com/haskell-suite/haskell-src-exts/blob/master/tests/examples/DerivingVia.hs#L165][Deriving Via Example]]

**** [[http://www.well-typed.com/blog/2019/09/eventful-ghc/][GHC Eventlog]] :EventLog:GHC:

**** [[https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/][GHC Users Guide]] :GHC:Guide:Manual:
**** [[https://tech.fpcomplete.com/blog/2018/04/async-exception-handling-haskell/][Exception Handling Problems with Async]]:Haskell:Exceptions:Async:
**** [[https://hackage.haskell.org/package/gdiff-1.1/docs/Data-Generic-Diff.html][Diff patch library in haskell]] :DiffPatch:Haskell:
**** [[https://well-typed.com/blog/2021/01/fragmentation-deeper-look/][ghc-debug]] :Debug:GHC:MemLeak:     
**** [[https://blog.josephmorag.com/posts/mcc0/][LLVM and Haskell]] :LLVM:Haskell:
*** Agda
**** [[https://doisinkidney.com/posts/2019-04-17-cubical-probability.html][Cubical Probability in Agda]] :Agda:CubalTypes:Probability
  Probability Monads in Cubical Agda
  Posted on April 17, 2019
  Tags: Agda, Probability

  Cubical Agda has just come out, and I’ve been playing around with it for a bit. 
  There’s a bunch of info out there on the theory of cubical types, 
  and Homotopy Type Theory more generally 
  (cubical type theory is kind of like an “implementation” of Homotopy type theory), 
  but I wanted to make a post demonstrating cubical Agda in practice, and one of 
  its cool uses from a programming perspective.
  So What is Cubical Agda?
  I don’t really know! Cubical type theory is quite complex (even for a type theory), 
  and I’m not nearly qualified to properly explain it. In lieu of a proper 
  first-principles explanation, then, I’ll try and give a few examples of how 
  it differs from normal Agda, before moving on to the main example of this post. 
*** SML, Ocaml, Reason
**** [[http://www.cs.cmu.edu/~crary/papers/2018/cmtool.pdf][Parser Generators]] :SML:Haskell:Parsing:
**** [[https://jozefg.bitbucket.io/posts/2015-01-08-modules.html][ML Modules]] :SML: :Programming: :FP:
**** [[http://blog.shaynefletcher.org/2017/05/more-type-classes-in-ocaml.html][Ocaml To Haskell]] :Haskell:OCaml:Reason:

**** [[https://github.com/shrynx/awesome-ppx-reasonml][PPX resources]] :PPX:Ocaml:
**** [[https://jaredforsyth.com/posts/template-based-macros-for-reason-ocaml/][Forsythe PPX]]:PPX:Ocaml:
**** [[https://blog.hackages.io/reasonml-ppx-8ecd663d5640][A good walkthrough on Reason PPX]] :PPX:Ocaml:
**** [[http://www.weaselhat.com/2020/08/07/formulog-ml-datalog-smt/][Formulog]] :ML:SMT:DataLog:
**** [[http://caml.inria.fr/pub/docs/u3-ocaml/index.html][Understanding the OCaml language]]:ML:Ocaml:
**** [[https://www.javierchavarri.com/data-first-and-data-last-a-comparison/][Data First Vs Last]] :ML:Reason:Opinions:
*** Julia
**** [[https://opensourc.es/blog/javis-v0.2-and-future/][animations in Julia]] :Julia:Animation:video:
[[https://github.com/Wikunia/Javis.jl][Javis The actual library]] :Julia:Animation:
[[file:img/eeg.gif]]
**** [[https://notamonadtutorial.com/julia-gpu-98a461d33e21][GPU processing in Julia]]
We are living in a time where more and more data is being created every day as well as new techniques and complex algorithms that try to extract the most out of it. As such, CPU capabilities are approaching a bottleneck in their computing power. GPU computing opened its way into a new paradigm for high-performance and parallel computation a long time ago, but it was not until recently that it become massively used for data science.
In this interview, Tim Besard, one of the main contributors to the JuliaGPU project, digs into some of the details about GPU computing and the features that make Julia a language suited for such tasks, not only from a performance perspective but also from a user one.
     
*** TLA+
**** [[https://www.tautvidas.com/blog/2017/12/experimenting-with-tla-and-pluscal-3-throttling-multiple-senders/][TLA Plus Throttling Multiple Senders]] :TLA+:Specifications:FormalSystems:
**** [[https://hillelwayne.com/post/action-properties/][Action Properties]] :TLA+:Specifications:FormalSystems:
*** Bash
**** [[https://github.com/anordal/shellharden/blob/master/how_to_do_things_safely_in_bash.md][Safe Bash]]
** Computation, visualization and that kind of thing
*** [[https://en.wikipedia.org/wiki/row-_and_column-major_order][row major columm major wiki entry (popular method)]] :matrixrepresentation:numericalcomputing:
*** [[https://news.ycombinator.com/item?id=24681914][Sparse Matrix Representation]] :MatrixRepresentation:SparseMatrix:NumericalComputing:
*** [[https://fgiesen.wordpress.com/2011/05/04/row-major-vs-column-major-and-gl-es/][Row Major Blog post]] :MatrixRepresentation:NumericalComputing:
*** [[https://cheatsheets.quantecon.org/][Rosetta Stone Matlab,python,julia]]:NumbericalComputing:Matlab:Python:Julia:
 A set of examples in Matlab Python and Julia
 [[./MatlabPythonRosetta.png]]
*** [[https://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-0-Scientific-Computing-with-Python.ipynb][python numeric tutorial]] :NumericalComputing:Python:
 Jupyter Notebook course
*** [[https://news.ycombinator.com/item?id=20211201][Probabalistic Programming for end users]] :Probabalistic:Programming:
*** [[https://en.m.wikipedia.org/wiki/Simulated_annealing][Simulated Annealing]] :Programming:Algorithms:NumericalComputing:
 [[./Travelling_salesman_problem_solved_with_simulated_annealing.gif]]
*** [[https://turing.ml/dev/][Turing.jl]]   :Probabilistic:Probramming:Julia:
*** Jupyter Notebook Links
**** [[https://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-4-Matplotlib.ipynb][Introduction Plot Example]]
**** [[https://tkf.github.io/emacs-ipython-notebook/#setup][Emacs Ipython Notbook]] 
*** [[https://philippmuens.com/logistic-regression-from-scratch/][logistic-regression from scratch]] :LogisticRegression:NumericalComputing:
** database related
*** [[http://www.lirmm.fr/~mugnier/articlespostscript/mugnierrr2011-keynote.pdf][advanced datalog]] :db: :datalog:
*** [[https://pdfs.semanticscholar.org/8b8e/27602f142b838cbeb6059865d942251d5d6a.pdf][datalog with existensials]]
*** [[http://arxiv.org/pdf/1210.2316v1.pdf][disjunctive quantifiers for datalog]] :db: :datalog:
*** [[https://www.infoq.com/presentations/storage-algorithms][modern db algorithms]] :db:algorithms:
*** [[https://www.nginx.com/blog/what-is-a-service-mesh/][service mesh]]
*** [[http://www.redbook.io/][redbook]]:db:redbook:
** distributed computing
*** [[https://www.info.ucl.ac.be/~pvr/book.html][concepts techniques]] :ComputerScience: :distributed: :book:
*** [[http://www.sosp.org/2001/papers/welsh.pdf][stage driven event architecture]] :distributed: :ComputerScience: :paper:
*** [[https://13a75b74-a-62cb3a1a-s-sites.googlegroups.com/site/umutacar/publications/pramod-thesis.pdf?attachauth=anoy7cqv4v3ed2lvttcmv-owtkgark9xtiq95sdsan_j2r4ecmbqyeofkfp6ezugi24oltguurabzbavpe7yvja5kj2xj-zhvmsbnz8g9tpti2tfv3jr57wbiwkb9jfnifxs5u5tx5pp5sn7vbd9p5hizsfscfmaiqizbabapjbd9yhprnfxppf0h3ec3vvcipwngppatxrq9ciwu9lfqn8tkjwqfd9ss3nwoprgk_6dkvskzfg5bgs%3d&attredirects=0][incremental parallel]] :incremental:distributed:ComputerScience:paper:
*** [[https://www.slideshare.net/koenighotze/event-sourcing-you-are-doing-it-wrong-devoxx][event sourcing doing it wrong]] :eventsourcing:distributed:
*** [[https://www.microsoft.com/en-us/research/wp-content/uploads/2016/07/leslie_lamport.pdf][tla+ example]] :tla:distributed:modeling:
*** [[https://lamport.azurewebsites.net/video/videos.html][tla+ videos leslie lamport]] :tla:distributed:modeling:
*** [[https://github.com/tlaplus/examples/tree/master/specifications/aba-asyn-byz][tla+ byzantine example]] :tla:distributed:example:modeling:
 + [[file:papers/4221.214134.pdf][tla+ byzantine paper]]
*** [[https://github.com/elastic/elasticsearch-formal-models][elastic search formal model]] :tla:distributed:modeling:elastic:
*** [[https://codahale.com/you-cant-sacrifice-partition-tolerance/][CAP Theorem]] :CAPTheorem:distributed:
** Computer Graphics
*** [[https://thebookofshaders.com/][Book of Shaders, how cool]] :ComputerGraphics:Shaders:
** exampleprograms
*** [[https://graphs.grevian.org/example][graphviz]]      :graphviz:examples:
**** [[https://github.com/mkirchner/linked-list-good-taste][kLinked List Elegant Linus]] :C Programming:Refactor:
**** [[https://livebook.manning.com/book/haskell-in-depth/chapter-9/v-10/227][Haskell In Depth]] :DiffPatch:Haskell:Memory:

** Domain Specific Programming Languages
*** [[https://www.gnu.org/software/units/][units a language for unit conversion]]
** Testing
*** [[https://blog.7mind.io/constructive-test-taxonomy.html][Constructive Test Taxonomy]] :Testing:DummyTests:
Many engineers don’t pay enough attention to tests. There are two reasons for this: it’s hard to make 
good tests and it’s not easy to formalize which tests are good and which are bad.

We have created own test taxonomy, an alternative to classic Unit/Functional/Integration trinity, 
allowing engineers to establish useful guidelines for their work on test suites.

*** [[https://dropbox.tech/infrastructure/athena-our-automated-build-health-management-system][Dropbox testing system]] :Testing:Athena:Dropbox:
[[./img/athena-dropbox.jpg]]
*** [[https://quickstrom.io/][Testing with statemachines]] :Testing:TemporalLogic:x
** Image Processing
*** [[https://jakearchibald.com/2020/avif-has-landed/][AVIF]] :AVIF:ImageFormat:Comparison:
[[./img/racecar.png]]
Back in ancient July I released a video that dug into how lossy and lossless 
image compression works and how to apply that knowledge to compress a set of 
different images for the web. Well, that's already out of date because AVIF 
has arrived. Brilliant.

AVIF is a new image format derived from the keyframes of AV1 video. It's a 
royalty-free format, and it's already supported in Chrome 85 on desktop. 
Android support will be added soon, Firefox is working on an implementation, 
and although it took Safari 10 years to add WebP support, I don't think we'll 
see the same delay here, as Apple are a member of the group that created AV1.

*** [[https://computationalthinking.mit.edu/Fall20/lecture26/][computational thinking]] :Probabalistic:Julia:Educational:
This is an introductory course on Computational Thinking. We use the Julia programming language to 
approach real-world problems in varied areas applying data analysis and computational and mathematical modeling. 
In this class you will learn computer science, software, algorithms, applications, and mathematics as an integrated whole.
*** [[https://3b1b.github.io/manim/index.html][Manim 3b1b vizualization]]
* design 
** [[https://developer.apple.com/design/resources/][Apple Design Resources]] :apple:design:ui:
** [[https://www.figma.com/blog/when-fonts-fall/][Font Fallback]] :typography:fonts:
** [[https://sachachua.com/blog/2020/06/pythonfontforgeorg-i-made-a-font-based-on-my-handwriting/][make your handwriting a font]] :typography:design:
i wanted to make a font based on my handwriting using only free software. 
it turns out that fontforge can be scripted with python. i know just a little 
about python and even less about typography, but i managed to hack together 
something that worked for me. if you’re reading this on my blog at https://sachachua.com/blog/ , 
you’ll probably see the new font being used on the blog post titles. whee!
** [[https://practicaltypography.com/][practical typography]  :typography:design:
** [[https://ciechanow.ski/color-spaces/][perception of color spaces]] :design:color:colortheory:goethe:physics:
   l** [[https://vega.github.io/vega/examples/tree-layout/][vega examples]] :vega:d3:
example alternative language for d3
** [[https://medium.com/techtrument/bye-bye-material-design-acaebcc7c6b4][dont use md]]
what we need is to inform people better, and produce better and healthier guidelines that address fundamental human perception paradigms.

** [[https://www.happyhues.co/palettes/14][interesting ui color pallettes]] :design:color:ui:
** [[https://practicaltypography.com/font-recommendations.html][font rec]]:fonts:typography:
** [[https://www.typography.com/blog/text-for-proofing-fonts][text for proofing fonts]] :fonts:typography:
** [[https://pdf.math.dev/][Build PDFs out of Websites]]
* Developer Tools   
** [[https://jvns.ca/blog/2020/06/28/entr/][entr, run on change program]] :DevTools:
** [[http://orgmode.org/manual/Easy-templates.html#Easy-templates][org-mode easy templates]]                                         :DevTools: :OrgMode:
** [[https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-yuan.pdf][Simple Testing Prevents most failures (distributed testing)]]     :DevTools: :Testing:
** [[http://unicodelookup.com/][Unicode Lookup Table]] :DevTools: :Unicode:
** [[http://www.hiqpdf.com/demo/ConvertHtmlToSvg.aspx][HTML to SVG]] :DevTools: :Html: :Svg:
** [[https://blog.trailofbits.com/2020/06/05/breaking-the-solidity-compiler-with-a-fuzzer/][Usinga  fuzzer to break a compiler]] :DevTools:Fuzzer:
* DevOps
** [[https://github.com/nsriram/lambda-the-terraform-way][Terraform Lambda]] :DevOps:  
** [[https://how.complexsystems.fail/][How Complex Systems Fail]]
** [[https://codefaster.substack.com/p/mastering-jq-part-1-59c][jq mast                                                        :DevOps:jq:

ery pt1]]
** [[https://blog.gitguardian.com/secrets-api-management/][Secrets Management]] :Security:DevOps:
** [[https://www.goldfiglabs.com/guide/saas-cto-security-checklist/][Security Checklist]] :Security:DevOps:
** [[https://neilmadden.blog/2019/01/16/can-you-ever-safely-include-credentials-in-a-url/][urls as capabilities]]:Security:DevOps:
Sometimes you might want to share a link as a secure copy of a piece of information.
Using a URL is a way to do that, this post goes over how to do that securely 
** [[http://www.linuxfromscratch.org/~bdubbs/cross2-lfs-book/][Linux From Scratch]] :Devops:Linux:
** [[https://techbeacon.com/enterprise-it/monitoring-demystified-guide-logging-tracing-metrics][Really nice guide on Logging, tracing and metrics]] :Logging:Tracing:Metrics:DevOps:
** [[https://www.oreilly.com/library/view/anomaly-detection-for/9781492042341/][Anolmaly detection and monitoring]]:DevOps:Monitoring:AnomalyDetection:
** [[https://ncase.me/loopy/][loopy]] :graphicaldesign:devops:
** https://landing.google.com/sre/book/chapters/monitoring-distributed-systems.html#xref_monitoring_golden-signals :dev ops:
** [[https://www.openpolicyagent.org/][datalog like policy agent (open policy agent)]] :datalog: :murica:

** [[https://martinfowler.com/bliki/circuitbreaker.html][circuit breaker]] :systemdesign:microservices:circuitbreaker
** [[https://news.ycombinator.com/item?id=20442200][bpf performance tools]] :devops:bpf:d-trace:
** [[https://mxtoolbox.com/][email mx records toolbox]] :mail:mx:   
website mx record test health
* History
** [[https://archive.org/details/sim_editor-publisher_1911-06-24_10_52/page/n3/mode/2up][Newspapers over time]] :History:Newspapers:
* economics and econometrics
** history of econ
*** [[https://www.econlib.org/five-more-books-revisionist-accounts-of-the-soviet-experience/][revisionist soviet economic history ]] :history:economics:communism:planning:
*** [[https://www.econlib.org/understanding-soviet-socialism-twenty-five-books/][understanding soviet socialism]] :history:economics:communism:
*** [[https://www.econlib.org/five-books-on-the-soviet-economy/][understanding soviet economy]] :history:economics:communism:

** [[https://universa.net/riskmitigation.html][risk mitigation universa]] :risk:economics:markets:investing:
universa fund made a huge return in covid, these are papers on tail risk trading.
** [[http://andrewgelman.com/2017/09/07/local-data-centralized-data-analysis-local-decision-making/][market vs government]]
** [[https://www.bloomberg.com/view/articles/2014-12-31/heres-what-economics-gets-right][effective economic modeling techniques]] :econometrics:
** [[http://press.princeton.edu/chapters/s10363.pdf][mastering metrics]] :econometrics:
** [[http://www.mostlyharmlesseconometrics.com/book-contents/][mostly harmless econometrics]] :econometrics:
** [[https://www.nature.com/articles/s41567-019-0732-0][ergodicity in economics]] :ergodicity:econometrics:
the ergodic hypothesis is a key analytical device of equilibrium statistical mechanics. 
it underlies the assumption that the time average and the expectation value of 
an observable are the same. where it is valid, dynamical descriptions can often 
be replaced with much simpler probabilistic ones — time is essentially eliminated from the models.
** [[https://polymarket.com/][Prediction Market Polymarket]] :prediction:econometrics:
* electrical engineering
** telemetry 
*** [[https://mikrotik.com/calculator][microtik range calculator]]
** embedded hardware teardowns
*** [[https://jaycarlson.net/embedded-linux/][Embedded Linux  System]] :ee:EmbeddedLinux:
After I published my $1 MCU write-up, several readers suggested I look at application processors — the MMU-endowed chips necessary to run real operating systems like Linux. Massive shifts over the last few years have seen internet-connected devices become more featureful (and hopefully, more secure), and I’m finding myself putting Linux into more and more places.

Among beginner engineers, application processors supplicate reverence: one minor PCB bug and your $10,000 prototype becomes a paperweight. There’s an occult consortium of engineering pros who drop these chips into designs with utter confidence, while the uninitiated cower for their Raspberry Pis and overpriced industrial SOMs.

This article is targeted at embedded engineers who are familiar with microcontrollers but not with microprocessors or Linux, so I wanted to put together something with a quick primer on why you’d want to run embedded Linux, a broad overview of what’s involved in designing around application processors, and then a dive into some specific parts you should check out — and others you should avoid — for entry-level embedded Linux systems.

Just like my microcontroller article, the parts I picked range from the well-worn horses that have pulled along products for the better part of this decade, to fresh-faced ICs with intriguing capabilities that you can keep up your sleeve.

If my mantra for the microcontroller article was that you should pick the right part for the job and not be afraid to learn new software ecosystems, my argument for this post is even simpler: once you’re booted into Linux on basically any of these parts, they become identical development environments.

That makes chips running embedded Linux almost a commodity product: as long as your processor checks off the right boxes, your application code won’t know if it’s running on an ST or a Microchip part — even if one of those is a brand-new dual-core Cortex-A7 and the other is an old ARM9. Your I2C drivers, your GPIO calls — even your V4L-based image processing code — will all work seamlessly.

At least, that’s the sales pitch. Getting a part booted is an entirely different ordeal altogether — that’s what we’ll be focused on. Except for some minor benchmarking at the end, once we get to a shell prompt, we’ll consider the job completed.

As a departure from my microcontroller review, this time I’m focusing heavily on hardware design: unlike the microcontrollers I reviewed, these chips vary considerably in PCB design difficulty — a discussion I would be in error to omit. To this end, I designed a dev board from scratch for each application processor reviewed. Well, actually, many dev boards for each processor: roughly 25 different designs in total. This allowed me to try out different DDR layout and power management strategies — as well as fix some bugs along the way.

I intentionally designed these boards from scratch rather than starting with someone else’s CAD files. This helped me discover little “gotchas” that each CPU has, as well as optimize the design for cost and hand-assembly. Each of these boards was designed across one or two days’ worth of time and used JLC’s low-cost 4-layer PCB manufacturing service.
*** [[https://www.crowdsupply.com/inverse-path/usb-armory/manufacturing-process][open source stick computer]]    :ee:
*** [[https://www.nand2tetris.org/][nand 2 tetris]]
*** [[https://lwn.net/articles/250967/][what every prog should know about memory]]
*** [[https://www.seeedstudio.com/][internet of things stuff]] :iot:embedded:market
** embedded programming 
+ [[http://electronut.in/stm32-returns/][stm32 tool chain]]
+ [[http://www.wolinlabs.com/blog/linux.stm32.discovery.gcc.html][stm32 arm abi firmware chain]]
** rf theory
*** [[http://www.antenna-theory.com/m/index.php][antenna theory website]] :antenna:rftheory:
 about this site:

antennas and antenna theory has always been a fascinating subject for me, 
and it is this excitement that leads me to present this tutorial. 
in my life, i have found that once i thoroughly understand a subject, 
i am amazed at how simple it seems, despite the initial complexity. 
this i have found true for a wide range of activities, be 
it riding a motorcycle, learning about antennas, or understanding 
physical phenomena such as electromagnetics. with that in mind, 
i endeavor to write this antenna theory website in the simplest 
of all possible manners. 

*** [[https://www.analog.com/en/applications/technology/smartmesh-pavilion-home.html#][smart mesh]]:mesh:IOT:Dust:
** digital electronics
*** [[https://www.allaboutcircuits.com/technical-articles/universal-logic-gates/][universal gates]]
introduction

a universal logic gate is a logic gate that can be used to construct all other logic gates.  
there are many articles about how nand and nor are universal gates, but many of these articles 
omit other gates that are also universal gates. this article covers two input logic gates, 
demonstrates that the nand gate is a universal gate, and demonstrates how other gates are 
universal gates that can be used to construct any logic gate.
[[./otheruniversalgates.png]]

*** [[https://projectf.io/posts/fpga-graphics/][FPGA Graphics]] :FGPA:Hardware:Display:Graphics:
Exploring FPGA Graphics
Welcome to Exploring FPGA Graphics. In this series, we explore graphics at the hardware level and 
get a feel for the power of FPGAs. We start by learning how displays work, before racing the beam with Pong, 
starfields and sprites, simulating life with bitmaps, drawing lines and triangles, and finally creating simple 3D models. 
I’ll be writing and revising this series throughout 2020 and 2021.
In this first post, we learn how computer displays work and animate simple shapes with an FPGA.    
* gas temp alarm
* gifs
[[https://i.imgur.com/aft0yt4.gif]]
* industrial automation
** [[https://www.plcacademy.com/ladder-logic-tutorial/][ladder logic programming]]
** [[file:papers/bainbridge_1983_automatica.pdf][irony of automation]] :industrialautomation:
this paper discusses the ways in which automation of industrial processes may expand 
rather than eliminate problems with the human operator. some comments will be made on 
methods of alleviating these problems within the "classic' approach of leaving the 
operator with responsibility for abnormal conditions, and on the potential for 
continued use of the human operator for on-line decision-making within human-computer collaboration.
** [[https://github.com/open62541/open62541/wiki/list-of-open-source-opc-ua-implementations][opc ua implementation]] :industrialautomation:opc ua:
** [[https://opcfoundation.org/wp-content/uploads/2015/03/keys-to-developing-an-embedded-ua-server_whitepaper_en.pdf][opc ua overview]] :industrialautomation:opc ua:
** [[https://www.redlion.net/flexedge/?utm_source=Social&utm_medium=Post&utm_campaign=Flexedge_Social_Fall2020][Red Lion IPC Flexedge]] :industrialautomation:ipc:redlion:
[[./img/redlion.png]]
Redlion is making some gorgeous hardware these days.
* Javascript
*** [[https://reaktor.com/blog/javascript-performance-fundamentals-make-bluebird-fast/][Optimizing JS]] :Javascript: :Optimization:
*** [[https://overreacted.io/a-complete-guide-to-useeffect/][React Reason useEffect]] :javascript:hooks:react:Reason:Ocaml:BuckleScript:
*** [[https://tools.ietf.org/html/draft-handrews-json-schema-01][json-schema]]
* kids stuff
** [[https://www.math-salamanders.com/math-puzzle-worksheets.html][Math Puzzles for Ellie (`2nd grade)]]:MathPuzzles:Kids:
** [[file:papers/childrens_taskbook_arnold_en_0.pdf][Math Problems for Children]]:MathProblems:Kids:
* Latex 
** A Deep Dive Through the Latex Tool Chaining
*** [[https://tug.org/texinfohtml/kpathsea.html][kpathsea is how tex looks up paths]]
*** [[https://www.overleaf.com/learn/latex/Articles/An_introduction_to_Kpathsea_and_how_TeX_engines_search_for_files][More on kpathsea]]
* logic 
** Methods of Reasoning
*** [[https://www.ukessays.com/essays/data-analysis/difference-between-deductive-inductive-and-abductive-research.php][Deductive, Inductive Abductive]] :logic:reason:
** Logic History 
*** [[https://www.britishwittgensteinsociety.org/wp-content/uploads/documents/lectures/Turing-and-Wittgenstein-on-Logic-and-Mathematics.pdf][Alan Turing, Wittgenstein]] :History:Logic:
** [[http://iml.univ-mrs.fr/~girard/trsy3.pdf][linear logic and equality]] :logic:
** [[http://blog.ezyang.com/2013/09/induction-and-logical-relations/][logical relations]] :logic:
induction and logical relations
logical relations are a proof technique which allow you to prove things such as normalization (all programs terminate) 
and program equivalence (these two programs are observationally equivalent under all program contexts).
** [[https://www.gutenberg.org/files/28696/28696-h/28696-h.htm][lewis carol symbolic logic]] :logic:
** [[https://books.google.com/books/about/Formal_Languages_in_Logic.html?id=5ZV7AAAAQBAJ&printsec=frontcover&source=kp_read_button&newbks=1&newbks_redir=0&gboemv=1#v=onepage&q&f=false][fformal languages in logic]] :logic:languages:
* Machine Code
[[http://www.sizecoding.org/wiki/Main_Page][Small Programs for 80x86]] :Assembly:
[[http://xlogicx.net/][Assembly is too high level]] :Assembly:Blog:
[[https://www.agner.org/optimize/][Optimization Resources for Assembly]] :Assembly:Optimization:
* Machine Learning
** [[https://arxiv.org/pdf/2105.04026.pdf][Modern Deep Learning Math]] :Math:DeepLearning:
** [[https://mbmlbook.com/MurderMystery.html][Model Based machine learning]] :MachineLearning:Models:
This is the stuff that had the hidden markov model <-> Kalman filter connection
** [[https://www.jeremyjordan.me/testing-ml/][Effective Testing in Machine Learning]] :MachineLearning:Testing:
** [[https://www.amazon.science/latest-news/machine-learning-course-free-online-from-amazon-machine-learning-university][Amazon Machine Learning]] :MachineLearning:Amazon:
** [[https://dennybritz.com/blog/ai-trading/][AI Trading Platform]] :MachineLearning:TradingPlatform:CaseStudy:
** [[https://github.com/jonathan-laurent/AlphaZero.jl][Alpha Go Zero in Julia]]   :MachineLearning:Julia:AlphaGo:
** [[https://chollinger.com/blog/2019/12/tensorflow-on-edge-or-building-a-smart-security-camera-with-a-raspberry-pi/][Tensor Flow on a Pi]]:MachineLearning:TensorFlow:Pi:Embedded:
** [[https://www.notion.so/Corrupt-sparse-irregular-and-ugly-Deep-learning-on-time-series-887b823df439417bb8428a3474d939b3][Time Series machine learning]] :MachineLearning:TimeSeries:
** [[https://www.nature.com/articles/s41598-018-24271-9][Time Series Data Paper]]:MachineLearning:TimeSeries:
** [[https://www.joelonsoftware.com/2020/06/18/hash-a-free-online-platform-for-modeling-the-world/][Hash AI]] :MachineLearning:AgentBasedSimulation:Modeling:
Agent based simulation trys to avoid coming up with math models.
Sometimes when you’re trying to figure out the way the world works, 
basic math is enough to get you going. If we increase the hot water 
flow by x, the temperature of the mixture goes up by y.

Sometimes you’re working on something that’s just too complicated for that, 
and you can’t even begin to guess how the inputs affect the outputs. 
At the warehouse, everything seems to go fine when you have less than 
four employees, but when you hit five employees, they get in each others’ 
way so much that the fifth employee effectively does no additional work.
** [[https://medium.com/@vitali.usau/install-cuda-10-0-cudnn-7-3-and-build-tensorflow-gpu-from-source-on-ubuntu-18-04-3daf720b83fe][Installing tensor flow]] :TensorFlow:
** [[https://arxiv.org/abs/1707.09627][Graphics Inference]] :MachineLearning:
** [[https://arxiv.org/abs/2007.04929][Graph Algorithms]] :MachineLearning:GraphTheory:
** [[https://arxiv.org/pdf/1312.6184.pdf][Do Deep nets need to be deep]]
** [[https://arxiv.org/pdf/1706.08605.pdf][Correct Machine Learning]] :MachineLearning:
** [[https://arxiv.org/abs/1612.04858][bayesian optimization for ML]] :MachineLearning:
** [[http://www.inference.vc/everything-that-works-works-because-its-bayesian-2/][everything that works]] :MachineLearning:
** [[http://videolectures.net/deeplearning2016_montreal/][Deep learning summer school]] :MachineLearning:
** [[http://karpathy.github.io/2015/05/21/rnn-effectiveness/][Unreasonable effectiveness of neural network]] :MachineLearning:
** [[http://www.asimovinstitute.org/neural-network-zoo/][Neural Network Zoo]] :MachineLearning:
** [[https://github.com/ZuzooVn/machine-learning-for-software-engineers][Machine Learning For Software engineers]] :MachineLearning:
** [[http://queue.acm.org/detail.cfm?id=3055303][Meijr probabilistic machine learning models]] :MachineLearning:
** [[https://blog.floydhub.com/][genetic algorithms]] :MachineLearning
When you're solving a problem, how do you know if the answer you've found is correct? 
** [[https://arxiv.org/pdf/1707.04615.pdf][Machine Learning Models]]
** [[https://insidebigdata.com/2017/02/03/pmml-pfa-way-forward-deploying-predictive-analytics/][PFA and PMML Machine learning interchange]] :MachineLearning:
** [[https://blog.jle.im/entry/practical-dependent-types-in-haskell-1.html][Neural Network example in haskell]] :Haskell:MachineLearning:
** [[https://www.pnas.org/content/early/2019/06/21/1817218116][Principal Component Analysis]]
** [[https://joellaity.com/2018/10/18/pca.html][PCA Spread Out]]
** [[https://towardsml.com/2019/09/17/bert-explained-a-complete-guide-with-theory-and-tutorial/][Machine Learning Bert]] :MachineLearning:NLP:Bert:
** [[https://github.com/onnx/onnx][ONNX Open Neural Net Exchange]] :MachineLearning:DevOps:
** [[https://github.com/abarbu/haskell-torch][haskell torch]] :MachineLearning:Haskell:Torch:
** [[https://eigenfoo.xyz/tensor-computation-libraries/][What I Wish Someone Had Told Me About Tensor Computation Libraries ]]:Tensorflow:PyTorch:
In this blog post, we’ll break down what tensor computation libraries actually are, and how they differ. 
We’ll take a detailed look at some popular libraries, and end with an observation on the future of Theano 
in the context of contemporary tensor computation libraries. 
** [[https://nn-512.com/][Neural Nets C Code Generator]] :NeuralNet:C-Code:
NN-512 is a compiler that generates C99 code for neural net inference

It takes as input a simple text description of a convolutional neural net inference graph
It produces as output a stand-alone C99 implementation of that graph
The generated C99 code uses AVX-512 vector instructions to perform inference
** ML Hardware 
*** [[https://timdettmers.com/2020/09/07/which-gpu-for-deep-learning/][GPU Guide for Deep Learning]] :GPU:MachineLearning:Hardware:
*** [[https://blog.inten.to/hardware-for-deep-learning-part-4-asic-96a542fe6a81][A More Broad Guide to ML Hardware]] :MachineLearning:Hardware:
** Clustering Algorithms
*** [[https://micans.org/mcl/][Markov Clustering]] :MachineLearning:Clustering:
*** [[https://en.wikipedia.org/wiki/Louvain_Modularity][Louvain Clustering]] :MachineLearning:Clustering:
*** [[https://en.wikipedia.org/wiki/Affinity_propagation][ Affinity Propgation Clustering ]
** Decision Trees
*** [[https://victorzhou.com/blog/intro-to-random-forests/][Intro to random forests]]
[[./decisiontree.png]]
Decision trees and random forest, an understandable introduction to me.
* makefiles
** [[https://www.gnu.org/software/make/manual/html_node/static-usage.html][makefile manual static usage]] :makefile:
* management & business
** [[https://blog.thinkst.com/2020/07/a-steve-jobs-masterclass-from-decade-ago.html?m=1][steve jobs masterclass]] :stevejobs:apple:marketing:strategy:
** [[https://stripe.com/atlas/guides/scaling-eng][scaling an engineering organization]]
** [[https://fs.blog/mental-models/][mental models]]:business:mentalmodels:farnumstreet:
** [[https://optimistictypes.com/moderating-sexual-assault/][sexual assault guidelines]] :management:hr:
** [[https://erikbern.com/2019/04/15/why-software-projects-take-longer-than-you-think-a-statistical-model.html][project estimation in software development]]:projectmanagement:business:
[[./softwareprojectestimation.png]]
estimating software timelines is difficult this is a nice breakdown of
some possible reasons.
[[https://news.ycombinator.com/item?id=19671673][interesting notes in the comments]]

** [[http://www.haskellforall.com/2019/06/the-cap-theorem-for-software-engineering.html][cap theorem and development]] :captheorem:development:management:
** [[https://www.stephnass.com/blog/startup-financial-model][saas financial model]] :business:finance:business model:
as a founder, there comes a time when you need a business plan, complete with financial forecasts, income statements, and fancy graphs that will impress your investors.
** [[https://tomtunguz.com/mispricing-of-software-companies/][Mispricing of software companies]] :business:finance:business:
Software companies are often priced in widely varying ways. 
This guy tries to break that out.
** [[https://theotherlifenow.com/how-i-made-3300-on-a-short-niche-philosophy-book/][post on hard tests]] :hardtests:business:
from the post: 
a hard test is one that is unlikely to find evidence, so if you find it you have a winner.
** [[https://news.ycombinator.com/item?id=24149020][Adventures in Improving AI]]
** [[https://paulosman.me/2019/12/30/production-oriented-development.html][Production Oriented Development]]
Interesting discussion of ideas that I find myself agreeing with.
8. Non-Production Environments Have Diminishing Returns

A more direct heading for this section would be “Non-Production Environments are Bullshit”. 
Environments like staging or pre-prod are a fucking lie. When you’re starting, they make a little sense, 
but as you grow, changes happen more frequently and you experience drift. Also, by definition, 
your non-prod environments aren’t getting traffic, which makes them fundamentally different. 
The amount of effort required to maintain non-prod environments grows very quickly. You’ll never 
prioritize work on non-prod like you will on prod, because customers don’t directly touch non-prod. 
Eventually, you’ll be scrambling to keep this popsicle sticks and duct tape environment up and running 
so you can test changes in it, lying to yourself, pretending it bears any resemblance to production.

** [[https://proformapartners.com/value/][Valuation Services]] :business:
** [[https://calpaterson.com/metadata.html][Interesting Article on Metadata and AI]] :business:marketing:MachineLearning:
Google has always performed a wide crawl of the entire web. But few webmasters are so 
naive as to assume their pages will be found this way. Even this website, which has 
fewer than 20 pages, has had problems with Google finding all of them. 
Relying solely on the general crawl has proved unworkable for most.
* manufacturing
** [[https://anuschkarees.com/blog/2014/05/01/how-to-assess-the-quality-of-garments-a-beginners-guide-part-i/][garment quality]] :fashion:quality:manufacturing:
* [[https://a16z.com/2020/09/07/on-productivity-scheduling-reading-habits-marc-andreessen/][Marc Andreessen]] :Business:Productivity:
The thing I’ve tried to do the last few years is really “barbell” the inputs. 
I basically read things that are either up to this minute or things that are timeless–
* marketing
** budgeting
*** [[https://www.kracov.co/writing/the-math-behind-saas-marketing-teams][math behind saas marketing]] :marketing:budget:saas:
** pricing 
*** [[https://blog.reifyworks.com/developing-your-pricing-strategy-15b5bb2f2b3a][understand your pricing strategy]]
** positioning
*** [[https://www.thefxck.com/interviews/product-positioning-april-dunford][april dunford, product positioning]]
really interesting case study on product market fit
* math
** graph theory 
*** [[http://web.stanford.edu/~saberi/sis2.pdf][random graph generation]]   :math:                            :graphtheory:
*** [[http://web.cs.elte.hu/~lovasz/bookxx/geomgraphbook/geombook2019.01.11.pdf][graphs and geometry]] :graphtheory:geometry:
** meta math
*** [[https://plus.google.com/u/0/+terencetao27/posts/6diqmz1jqrb][terrance tao, the meaning of =]]   :math: :graphtheory:               :tao:
*** [[https://linguotopia.wordpress.com/2016/04/24/notes-on-a-history-of-mathematics/][history of math]]  :math:                                         :history:
** probability
*** [[file:papers/316-m-resone.pdf][History of Probability D'Alembert]] :math:probability:stat:gambling:
In this article, we ask a question not so often addressed: what made various bettingsystems 
so attractive to novice gamblers?  Because the systems were often touted bycasinos to encourage 
more gambling, we can sharpen the question by asking what aspectsof the systems helped blind the 
casinos’ customers to the risks they were taking.
*** [[https://petermchale.github.io/Math175/lectures/L1%20The%20Longest%20Run%20of%20Heads.pdf][Longest Run of Heads]]:Probability:   
*** [[https://www.researchers.one/article/2020-03-9][naive probability]] :probability:math:reasoning:
naive probabilism is the (naive) view, held by many technocrats and academics, 
that all rational thought boils down to probability calculations. this viewpoint 
is behind the obsession with `data-driven methods' that has overtaken the 
hard sciences, soft sciences, pseudosciences and non-sciences. 
it has infiltrated politics, society and business. 
it's the workhorse of formal epistemology, decision theory and behavioral economics. 

*** [[https://research.neustar.biz/2012/04/18/statistical-toolbox-the-kolmogorov-smirnov-test/][kolmogorov smirnov test]] :math: :probability:                       :stat:
*** [[https://static1.squarespace.com/static/54bf3241e4b0f0d81bf7ff36/t/55e9494fe4b011aed10e48e5/1441352015658/probability_cheatsheet.pdf][distributions cheatsheet]] :stat:probability:math:
*** [[https://medium.com/@allenfarrington/a-tale-of-two-talebs-1775dff3302b][a tale of two talebs, lots of links of probability]]:probability:critique:taleb
while this is mostly a takedown of nassim taleb, there are lots of intersting links
and thoughts from disciplines related to risk taking.
*** [[http://www.infinitecuriosity.org/vizgp/][visualization of gausian process]]:probability:
** calculus
*** [[https://www.semanticscholar.org/paper/the-solution-of-the-problem-of-integration-in-fini-risch/de5adc98bc00734d0714be30ba268a1b0e818e6d?citingpaperssort=is-influential&citingpaperslimit=10&citingpapersoffset=10&citedpaperssort=is-influential&citedpaperslimit=10&citedpapersoffset=0][risch algorithm]] :calculus:
** statistics
*** [[http://www.stat.uchicago.edu/~pmcc/tensorbook/][tensor methods in statistics]]  :math: :stat:                      :tensor:
*** [[https://lindeloev.github.io/tests-as-linear/][statistical tests as linear models]]
[[./linear-models-statistical-tests.png]]
*** [[https://link.springer.com/book/10.1007/978-3-319-29854-2][time series forecasting textbook ]] :math:stat:forecasting:
*** [[https://otexts.com/fpp2/][forecasting principles and practice]] :math:stat:forecasting:
the book is written for three audiences: (1) people finding themselves doing forecasting in business 
when they may not have had any formal training in the area; (2) undergraduate students studying business; 
(3) mba students doing a forecasting elective. we use it ourselves for a third-year subject for 
students undertaking a bachelor of commerce or a bachelor of business degree at monash university, australia.
*** [[https://kanoki.org/2020/04/30/time-series-analysis-and-forecasting-with-arima-python/][arima forecasting]] :math:stat:forecasting:
in the previous post we have seen how to visualize a time series data. in this post we will discuss 
how to do a time series modelling using arma and arima models. here ar stands for auto-regressive and ma stands for moving average
*** [[https://www.stats.ox.ac.uk/~doucet/andrieu_doucet_holenstein_PMCMC.pdf][Particle Markov chain Monte Carlo methods]]
** Serialization
*** [[https://formats.kaitai.io/][KaiTai]] :KaiTai:Serialization


Possible addition to dhall 
Format Gallery

All formats in this gallery have formal specifications in Kaitai Struct language. They can be used:

    as is — as a concise text reference,
    as visual block diagram (thanks to GraphViz),
    to explore hex dump in detail (with a visualizer),
    as a ready-made library in any of supported target programming languages (after compiling it with Kaitai Struct compiler).
   
** vizualization
*** [[https://drossbucket.com/2021/06/30/hacker-news-folk-wisdom-on-visual-programming/][visual programming languages]] :Languages:visualization:
*** [[https://mathoverflow.net/questions/366070/what-are-the-benefits-of-writing-vector-inner-products-as-langle-u-v-rangle/366118#366118][Terry Tao on Notation]] :Notation:math:visualization:
*** [[https://news.ycombinator.com/item?id=23430282][penrose math formula visualization]] :visualization:math:
a team of researchers from cmu and technion recently introduced a new system, penrose, 
that can turn complex mathematical notations into various styles of simple diagrams. 
the novel system rapidly attracted attention on social media as a promising visualization 
tool for effectively communicating complex mathematical ideas and concepts.
*** [[https://seaborn.pydata.org/tutorial/aesthetics.html#seaborn-figure-styles][sin plot style in python]]
#+begin_src 
sns.set_style("dark")
sinplot()
#+end_src
*** [[https://discourse.julialang.org/t/jupyter-integration-with-emacs/21496/5][jupyter and emacs ]]
this is a nice blog post on emacs jupyter 
*** [[https://github.com/dzop/emacs-jupyter][emacs-jupyter package]]

this is the actual package for emacs and jupyter integration 
use jupyter-run-repl in org mode
** geometry
*** [[http://www.math.chalmers.se/~wastlund/cosmic.pdf][geometric proof of eulers formula]] :math:                       :geometry:
*** [[http://erikdemaine.org/papers/cgta2000/paper.pdf][algorithmic paper folding]] :math: :geometry:                     :origami:
*** [[https://www.scribd.com/document/190482625/a-practical-algorithm-for-decomposing-polygonal-domains-into-convex-polygons-by-diagonals][convex hull decomposition]] :math: :geometry:       :computationalgeometry:
*** [[https://www.cs.cmu.edu/~kmcrane/projects/dgpdec/paper.pdf][discrete differential geometry]] :geometry:differentialgeometry:
** linear
*** [[https://networkscience.wordpress.com/2012/05/04/taxonomy-of-matrices/][taxonomy of matricies]] :math:                                     :linear:
*** [[https://golem.ph.utexas.edu/category/2016/06/how_the_simplex_is_a_vector_sp.html][simplex as a vector space]] :math:                                 :linear:
*** [[http://www-math.mit.edu/~etingof/egnobookfinal.pdf][tensor categories]] :math:                                         :linear:
** category theory
+ [[https://github.com/pamellies/lambda-calculus-and-categories][Lambda Calculus and Categories]] :LambdaCalculus:CategoryTheory:
+ [[https://golem.ph.utexas.edu/category/2020/01/profunctor_optics_the_categori.html#comments][profunctor optics a categorical view]]
** complexity and information theory
*** [[https://www.waveform.com/blogs/main/5g-and-shannons-law][shannons law]] :information theory:shannon:
*** [[https://necsi.edu/dynamics-of-complex-systems   ][dynamics of complex systems]]
dynamics of complex systems is the first text describing the modern unified study of complex systems. 
it is designed for upper-undergraduate/beginning graduate-level students, and covers a wide range of 
applications in a wide array of disciplines. a central goal of this text is to develop models and 
modeling techniques that are useful when applied to all complex systems. this is done by adopting 
both analytic tools, from statistical mechanics to stochastic dynamics, and computer simulation techniques, 
such as cellular automata and monte carlo. in four sets of paired, self-contained chapters, yaneer bar-yam 
discusses complex systems in the context of neural networks, protein folding, living organisms, and finally, 
human civilization itself. he explores fundamental questions about the structure, dynamics, evolution, 
development and quantitative complexity that apply to all complex systems. in the first chapter, 
mathematical foundations such as iterative maps and chaos, probability theory and random walks, 
thermodynamics, information and computation theory, fractals and scaling, are reviewed to 
enable the text to be read by students and researchers with a variety of backgrounds.
*** [[https://cse.buffalo.edu/faculty/atri/courses/coding-theory/book/web-coding-book.pdf#page19][web-coding-book]] :information theory:encoding:
** constructive mathematics 
*** [[https://ncatlab.org/nlab/show/constructive+mathematics][ncat-lab]]
1. idea

broadly speaking, constructive mathematics is mathematics done without the principle of excluded middle, 
or other principles, such as the full axiom of choice, that imply it, hence without “non-constructive” 
methods of formal proof, such as proof by contradiction. this is in contrast to classical mathematics, where such principles are taken to hold.

** linear algebra
[[https://ocw.mit.edu/resources/res-18-010-a-2020-vision-of-linear-algebra-spring-2020/index.htm][linear algebra strang 2020]]
** General Education
*** [[https://betterexplained.com/][Better Explained]] :Education:Math:Probability:Trigonometry:

[[./img/QuadraticFormula.png]]
Better explained has a nice set of visualizations to make learning some math concepts more
intuitive.

** Topology
*** [[https://www.math.columbia.edu/~woit/wordpress/?p=12238][New Spaces in Math]] :Spaces:Math:
** Symbols
* [[https://mathvault.ca/hub/higher-math/math-symbols/][Math Symbols]] :Math:Symbols:
*** [[https://mathvault.ca/hub/higher-math/math-symbols/set-theory-symbols/][Set Theory Symbols]] :Math:SetTheory:
* Mathematicians 
So sometimes I think someones whole work seems really cool but I am worried I won't remember their name.
** [[https://en.wikipedia.org/wiki/Richard_E._Bellman][Richard Bellman]]:Mathematician:DynamicProgramming:CurseOfDimensionality:
Richard Bellman invented Dynamic programming. What a cool thing to invent.
** [[file:papers/epsilon.pdf][Terence Tao Epsilon in a room]]
I grabbed this paper because of looking for ways to understand Borel Algebra.
* mechanical engineering 
** electric motors 
*** [[http://people.ucalgary.ca/~aknigh/electrical_machines/fundamentals/f_main.html][electric machines]] :ee: :me: :motors: :drives:
* Networking
*** [[http://www.tcpipguide.com/index.htm][TCP/IP]]  :Networking: :TCP:
*** [[https://medium.com/@copyconstruct/nonblocking-i-o-99948ad7c957][Nonblocking IO]]
*** [[https://tailscale.com/blog/how-nat-traversal-works/][Nat Traversal]]:Nat:Networking:
[[./img/nat-intro.png]]    
* Nix
** [[https://iohk.io/blog/how-we-use-nix-at-iohk/][IOHK How we use Nix]] :IOHK:Nix:
Why Nix?
There are many existing systems for software configuration management, 
some with far more users than Nix. However, we believe that Nix has the 
best available implementation of ‘Infrastructure as Code’, not only in 
terms of features, but also in its design and potential.
** [[https://nixos.wiki/wiki/Nix_Expression_Language][The Nix Expression Language]] :Nix:Language:
This discussion article covers the syntax, semantics, typing, compilation, tooling and libraries of the Nix Expression Language. 
** [[https://blog.patchgirl.io/nixos/2020/03/31/nixos.html][Work through building a website in nix]]
This is the last article of this series and will focus on my experience with NixOS.
In a nutshell, NixOS is a operating system based on Linux that provides a declarative package and configuration management.
** [[https://engineering.shopify.com/blogs/engineering/what-is-nix][Motivational Nix blogpost]]  
** [[https://nixos.org/nix/manual/#chap-writing-nix-expressions][Specific Nix Expression Building]]:Nix:Language:
* oilfield
** [[https://www.scribd.com/document/97677521/abb-totalflow-plunger-user-guide][abb total flow]]  :plungerlift: :oil:
** [[https://www.shaletec.com/home/faq/which-algorithm/][Plunger Lift Optimization]] :plungerlift:oil:
* particular specifications
** excel format
+ [[http://download.microsoft.com/download/3/e/3/3e3435bd-aa68-4b32-b84d-b633f0d0f90d/spreadsheetmlbasics.ppt][power point excel format]]
+ [[http://www.ecma-international.org/publications/standards/ecma-376.htm][ecma standard]]
+ [[https://en.wikipedia.org/wiki/microsoft_office_xml_formats][wiki page]]
+ [[https://docs.microsoft.com/en-us/dotnet/api/documentformat.openxml.spreadsheet.cell?redirectedfrom=msdn&view=openxml-2.8.1][doc format link]]
+ [[https://www.example-code.com/csharp/parse_xls.asp][parser examples]]
* performance related
** [[https://www.nayuki.io/page/a-fundamental-introduction-to-x86-assembly-programming][assembly programming introduction]]  :optimization: :assembly:
** [[https://github.com/processone/tsung][tsung http]] :optimization:performance:htt
** [[https://lwn.net/SubscriberLink/827180/a1c1305686bfea67/][Lockless Algorithms for mere mortals]] :optimization:performance:linux kernel:
* personal
** [[https://youthsoccerrankings.us/team.html?teamid=1603613][soccer rankings]] :soccer:
* Physics
*** [[http://philsci-archive.pitt.edu/13523/1/blackhole_review.pdf][Case for blackholes]] :Physics:Blackholes:
**** [[http://philsci-archive.pitt.edu/13523/1/blackhole_review.pdf][Blackholes II]] :Physics:Blackholes:
*** [[https://mitpress.mit.edu/sites/default/files/titles/content/sicm_edition_2/toc.html][Structure and Interpretation of Mechanics]] :Physics:l
* productivity
** [[https://www.timeanddate.com/worldclock/meetingtime.html?year=2019&month=9&day=10&p1=122&p2=31&p3=184][timezone app]] :timezone:scheduling:  
* Reverse Engineering
** [[https://www.thirtythreeforty.net/posts/2020/05/hacking-reolink-cameras-for-fun-and-profit/][Reverse engineering ]]      :ReverseEngineering:
** [[https://mika-s.github.io/wireshark/lua/dissector/2017/11/04/creating-a-wireshark-dissector-in-lua-1.html][Lua Scripts in wireshark]]   :ReverseEngineering:
** [[https://ghidra-sre.org/][NSA hacking Tool ghidra]]:ReverseEngineering:
* security related
** [[https://woumn.wordpress.com/2016/05/02/security-principles-in-ios-architecture/][ios security]] :security:
** [[https://webcache.googleusercontent.com/search?q=cache:jtkf6wuc348j:https://humblesec.wordpress.com/2017/07/05/assemby-to-pseudo-code-manually/][assembly to pseudo code]] :security:
** [[http://www.phrack.org/papers/attacking_javascript_engines.html][attacking javascript engines]] :security:
** [[https://github.com/brannondorsey/wifi-cracking][wifi crack]] :security: 
** [[https://embeddedbits.org/introduction-embedded-linux-security-part-1/][ Embedded Linux Security ]]
[[./img/SecurityModel.png]]
* Signal Processing
** [[http://www.anuncommonlab.com/articles/how-kalman-filters-work/][kalman filters, how they work]]                           :SignalProcessing: 
* SMT and Static Analysis
** [[https://www.philipzucker.com/Modelling_TLA_in_z3py/][Modelling TLA in z3]] :SMT:TLA+
It’s that time of year again where I’m fiddling around with Z3Py. I’m booting it back up because I’m scheduled to do a tutorial on Z3 on Feb 3. 
It’s kind of silly because I probably already have too much content, and the tutorial is aimed at newbies, but there are some fun new things that 
I’ve learned in the last year I can do in Z3. As one example, it’s not so hard to build a pretty reasonable simulacrum of TLA+ in Z3.:
** [[https://cacm.acm.org/magazines/2019/8/238344-scaling-static-analyses-at-facebook/fulltext][Static Analysis]]  
Static analysis tools are programs that examine, and attempt to draw conclusions about, 
the source of other programs without running them. At Facebook, we have been investing 
in advanced static analysis tools that employ reasoning techniques similar to those from 
program verification. The tools we describe in this article (Infer and Zoncolan) target 
issues related to crashes and to the security of our services, they perform sometimes 
complex reasoning spanning many procedures or files, and they are integrated into 
engineering workflows in a way that attempts to bring value while minimizing friction.

** [[https://research.nccgroup.com/2021/01/29/software-verification-and-analysis-using-z3/][Z3 and Protocol Verification]] :SMT:Z3:Protocol:
This post provides a technical introduction on how to leverage the Z3 Theorem Prover 
to reason about the correctness of cryptographic software, protocols and otherwise, 
and to identify potential security vulnerabilities.

* Text and Content Editing
** [[http://ergoemacs.org/emacs/elisp_syntax_coloring.html][Syntax Highlighting example in emacs]] :emacs:typography:
** [[https://joaotavora.github.io/yasnippet/snippet-development.html][YaSnippet examples]]
Really nice examples of using YaSnippet including the one I forget all the time 

#+BEGIN_SRC markdown

Tab stop fields

Tab stops are fields that you can navigate back and forth by TAB and S-TAB. They are written by $ followed with a number. $0 has the special meaning of the exit point of a snippet. That is the last place to go when you've traveled all the fields. Here's a typical example:

<div$1>
    $0
</div>

Placeholder fields

Tab stops can have default values – a.k.a placeholders. The syntax is like this:

${N:default value}

They act as the default value for a tab stop. But when you first type at a tab stop, the default value will be replaced by your typing. The number can be omitted if you don't want to create mirrors or transformations for this field.
Mirrors

We refer the tab stops with placeholders as a field. A field can have mirrors. All mirrors get updated whenever you update any field text. Here's an example:

\begin{${1:enumerate}}
    $0
\end{$1}


#+END_SRC

** [[https://orgmode.org/org.html#Structure-templates][structure-templates for src control]]
** [[https://kunststube.net/encoding/][Text Encoding]] :text:unicode:encodings:

* type theory
** [[https://blog.burakemir.ch/2020/04/higher-order-logic-and-equality.html?m=1][higher order logic and equality]] :typetheory:logic:lambdacalculus:
o5e59da95b58a0266fc00004c
#+begin_src
in this post, i want to sketch a particular perspective on λ-calculus and higher-order logic and church's simple theory of types. 
i have a few motivations to write this up. one of them is that as an undergrad (ages ago), upon encountering first-order predicate logic, 
i had endlessly wondered why one couldn't use "boolean functions" and something like functional programming for logic. 
it was only much later that i discovered church's 1940 typed λ calculus was in a sense, just that.


#+end_src


** [[https://github.com/michaelt/martin-lof][collected works of per martin loh]] :typetheory: :loh: :papers:
*** [[http://www.cs.cmu.edu/~fp/courses/15312-f04/handouts/][foundations of programming languages pfenning]] :typetheory: :book:
*** [[http://www.cs.cmu.edu/~rwh/courses/hott/][bob harper hott]] :book: :typetheory: :ProgrammingLanguages:
*** [[http://homepages.inf.ed.ac.uk/gdp/publications/abstract_syn.pdf][marcelo fiore abstract syntax variable binding]] :ComputerScience:
*** [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=3&ved=0ahukewjwl4qbplnrahwoi1qkhaigajmqfggjmai&url=http%3a%2f%2fresearchmap.jp%2f%3faction%3dcv_download_main%26upload_id%3d50501&usg=afqjcnfv2jrokhvmqbp_4cryjfcxcrvpng][mako hamana, syntax]] :ComputerScience: :ProgrammingLanguages:
*** [[https://www.cs.uoregon.edu/research/summerschool/summer15/curriculum.html][basic proof theory]] :ComputerScience: :lectures:                  :course:
** [[https://arxiv.org/abs/1803.02294][a self-contained, brief and complete formulation of voevodsky's univalence axiom]] :typetheory: :univalence:
** [[https://vrahli.github.io/articles/fcs-long.pdf][computability beyond choice sequences]] :typetheory: :intuitionist:
** [[https://github.com/oplss/introduction-to-algebraic-effects-and-handlers][introduction to algebraic effects]] :andrej:typetheory:algebraiceffects:
* Useful Applications
** [[https://github.com/sickcodes/Docker-OSX][Docker OSX]] :Docker:OSX:Computer Applications:
(setq helm-locate-fuzzy-match t)

* ux ui api dsl 
** [[https://www.dexplo.org/dexplot/][dex plot table plotting library]] :table:plotting:
this library is a possible helper for custom table
** [[https://archive.org/stream/philtrans09445034/09445034#page/n11/mode/2up][babbages mechanical notation]] :history: :me:
** [[https://fontawesome.com/cheatsheet?from=io][font-awesome cheatsheet]] :fonts:ui:design:
** [[https://venam.nixers.net/blog/unix/2020/09/14/playing_with_fonts.html][Fonts under the hood]]    :fonts:ui:DeepDive:
Freetype, included in the font stack on Unix, is quite complex. There are so many layers to get it to do what it does that it’s easy to get lost. 
From finding the font, to actually rendering it, and everything in between. Like most of the world, I use a rather low screens 
definition (1366x768 with 96 dpi) and rather old-ish laptop, unlike some font designers that live in a filter bubble 
where everyone has the latest macbook. Thus, good and legible font rendering is important. Let’s play with lesser known 
toggles available to us when it comes to font rendering and see what they do, let’s have fun and explore possibilities.   
** [[https://css-tricks.com/snippets/css/a-guide-to-flexbox/][flexbox a guide]] :flexbox:webdesign:css:ui:
* web specs
** [[https://tools.ietf.org/html/rfc3986#section-3.3][general http uri]] 
* Interent Link Dumps
** [[https://csgordon.github.io/books.html][Textbooks Free]]
Electronic References

Below is a loosely-categorized collection of links to CS textbooks in a variety of areas that are freely available online, usually because they are one of the following:

    An open textbook (such as PLAI, SF, or the HoTT book)
    An older book that is out of print, for which the copyright has returned to the original author(s) (such as TTFP)
    An author’s own preprint or draft of a textbook. This includes cases where the author has made special arrangements with a publisher to host an electronic copy of a 
published text on their homepage while it remains in print.

Most of these I’ve only used for brief personal reference, and have not read in depth. The exceptions, those books I’ve spent considerable time with and highly recommend, are marked with asterisks.

I also include below a list of papers I consider good stand-alone introductions to certain topics, and a list of links to thorough special topics courses.

If you find one of the links below is broken or has moved, feel free to let me know.

Those with time to spare and looking to have less of it may enjoy browsing the QA call numbers in UPenn’s extensive listing of online books. Most of those listed here were 
found independently over the years, but I’ve just now (June 2020) learned of this excellent repository of links. I’ll add to the links below as I find promising books.   


America (/ 1174.0 (/ (* 2.8 100 ) 1e6)) 4.192e6

UK      (/ 1222  (/ (* 4.2  100) 1e6)) 2.909e6

Ireland (/ 483   (/ (* 0.7 100) 1e6)) 6.9e6

Spain   (/ 1127      (/ (* 1.0 100 ) 1e6)) 11.27e6

Germany (/ 517 (/ (* 0.8 100) 1e6)) 6.42 e6


10.48.252.31

